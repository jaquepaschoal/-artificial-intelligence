/*!
 * Manager Student
 * Application for the course Sistema para Internet
 * https://gitlab.com/si-devs/student-manager-front
 * @author Jaqueline Paschoal and Robson Formigão
 * @version 1.1.1
 * Copyright 2018. MIT licensed.
 */
!function(e,t){var a="DataTable";"object"==typeof exports?module.exports=t(a):"function"==typeof define&&define.amd?define([],t(a)):e[a]=t(a)}("undefined"!=typeof global?global:this.window||this.global,function(e){"use strict";var t=window,a=document,i=a.body,n={perPage:10,perPageSelect:[5,10,15,20,25],sortable:!0,searchable:!0,nextPrev:!0,firstLast:!1,prevText:"&lsaquo;",nextText:"&rsaquo;",firstText:"&laquo;",lastText:"&raquo;",ellipsisText:"&hellip;",ascText:"▴",descText:"▾",truncatePager:!0,pagerDelta:2,fixedColumns:!0,fixedHeight:!1,header:!0,footer:!1,labels:{placeholder:"Search...",perPage:"{select} entries per page",noRows:"No entries found",info:"Showing {start} to {end} of {rows} entries"},layout:{top:"{select}{search}",bottom:"{info}{pager}"}},s=function(e){return"[object Object]"===Object.prototype.toString.call(e)},r=function(e){return Array.isArray(e)},o=function(e){var t=!1;try{t=JSON.parse(e)}catch(a){return!1}return!(null===t||!r(t)&&!s(t))&&t},l=function(e,t){for(var a in t)if(t.hasOwnProperty(a)){var i=t[a];i&&s(i)?(e[a]=e[a]||{},l(e[a],i)):e[a]=i}return e},d=function(e,t,a){var i;if(s(e))for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(a,e[i],i);else for(i=0;i<e.length;i++)t.call(a,e[i],i)},h=function(e,t,a){e.addEventListener(t,a,!1)},c=function(e,t){var i=a.createElement(e);if(t&&"object"==typeof t){var n;for(n in t)"html"===n?i.innerHTML=t[n]:i.setAttribute(n,t[n])}return i},p=function(e,t){if(e instanceof NodeList)d(e,function(e){p(e,t)});else if(t)for(;e.hasChildNodes();)e.removeChild(e.firstChild);else e.innerHTML=""},u=function(e,t,a){return c("li",{"class":e,html:'<a href="#" data-page="'+t+'">'+a+"</a>"})},f={add:function(e,t){e.classList?e.classList.add(t):f.contains(e,t)||(e.className=e.className.trim()+" "+t)},remove:function(e,t){e.classList?e.classList.remove(t):f.contains(e,t)&&(e.className=e.className.replace(new RegExp("(^|\\s)"+t.split(" ").join("|")+"(\\s|$)","gi")," "))},contains:function(e,t){if(e)return e.classList?e.classList.contains(t):!!e.className&&!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))}},g=function(e,t){var a,i;1===t?(a=0,i=e.length):t===-1&&(a=e.length-1,i=-1);for(var n=!0;n;){n=!1;for(var s=a;s!=i;s+=t)if(e[s+t]&&e[s].value>e[s+t].value){var r=e[s],o=e[s+t],l=r;e[s]=o,e[s+t]=l,n=!0}}return e},b=function(e,t,a,i,n){i=i||2;var s,r=2*i,o=t-i,l=t+i,h=[],p=[];t<4-i+r?l=3+r:t>a-(3-i+r)&&(o=a-(2+r));for(var u=1;u<=a;u++)if(1==u||u==a||u>=o&&u<=l){var g=e[u-1];f.remove(g,"active"),h.push(g)}return d(h,function(t){var a=t.children[0].getAttribute("data-page");if(s){var i=s.children[0].getAttribute("data-page");if(a-i==2)p.push(e[i]);else if(a-i!=1){var r=c("li",{"class":"ellipsis",html:'<a href="#">'+n+"</a>"});p.push(r)}}p.push(t),s=t}),p},m=function(e){var t=!1,a=!1;if(e=e||this.options.data,e.headings){t=c("thead");var i=c("tr");d(e.headings,function(e){var t=c("th",{html:e});i.appendChild(t)}),t.appendChild(i)}e.data&&e.data.length&&(a=c("tbody"),d(e.data,function(t){if(e.headings&&e.headings.length!==t.length)throw new Error("The number of rows do not match the number of headings.");var i=c("tr");d(t,function(e){var t=c("td",{html:e});i.appendChild(t)}),a.appendChild(i)})),t&&(null!==this.table.tHead&&this.table.removeChild(this.table.tHead),this.table.appendChild(t)),a&&(this.table.tBodies.length&&this.table.removeChild(this.table.tBodies[0]),this.table.appendChild(a))},v=function(e,t){var a=!1;if(t)switch(t){case"ISO_8601":a=moment(e,moment.ISO_8601).format("YYYYMMDD");break;case"RFC_2822":a=moment(e,"ddd, MM MMM YYYY HH:mm:ss ZZ").format("YYYYMMDD");break;case"MYSQL":a=moment(e,"YYYY-MM-DD hh:mm:ss").format("YYYYMMDD");break;case"UNIX":a=moment(e).unix();break;default:a=moment(e,t).format("YYYYMMDD")}return a},x=function(e){return this.dt=e,this};x.prototype.swap=function(e){if(e.length&&2===e.length){var t=[];d(this.dt.headings,function(e,a){t.push(a)});var a=e[0],i=e[1],n=t[i];t[i]=t[a],t[a]=n,this.order(t)}},x.prototype.order=function(e){var t,a,i,n,s,r,o,l=[[],[],[],[]],h=this.dt;d(e,function(e,i){s=h.headings[e],r="false"!==s.getAttribute("data-sortable"),t=s.cloneNode(!0),t.originalCellIndex=i,t.sortable=r,l[0].push(t),h.hiddenColumns.indexOf(e)<0&&(a=s.cloneNode(!0),a.originalCellIndex=i,a.sortable=r,l[1].push(a))}),d(h.data,function(t,a){i=t.cloneNode(),n=t.cloneNode(),i.dataIndex=n.dataIndex=a,null!==t.searchIndex&&void 0!==t.searchIndex&&(i.searchIndex=n.searchIndex=t.searchIndex),d(e,function(e,a){o=t.cells[e].cloneNode(!0),o.data=t.cells[e].data,i.appendChild(o),h.hiddenColumns.indexOf(e)<0&&(o=t.cells[e].cloneNode(!0),o.data=t.cells[e].data,n.appendChild(o))}),l[2].push(i),l[3].push(n)}),h.headings=l[0],h.activeHeadings=l[1],h.data=l[2],h.activeRows=l[3],h.update()},x.prototype.hide=function(e){if(e.length){var t=this.dt;d(e,function(e){t.hiddenColumns.indexOf(e)<0&&t.hiddenColumns.push(e)}),this.rebuild()}},x.prototype.show=function(e){if(e.length){var t,a=this.dt;d(e,function(e){t=a.hiddenColumns.indexOf(e),t>-1&&a.hiddenColumns.splice(t,1)}),this.rebuild()}},x.prototype.visible=function(e){var t,a=this.dt;return e=e||a.headings.map(function(e){return e.originalCellIndex}),isNaN(e)?r(e)&&(t=[],d(e,function(e){t.push(a.hiddenColumns.indexOf(e)<0)})):t=a.hiddenColumns.indexOf(e)<0,t},x.prototype.add=function(e){var t,a=this,i=document.createElement("th");return this.dt.headings.length?(this.dt.hiddenHeader?i.innerHTML="":e.heading.nodeName?i.appendChild(e.heading):i.innerHTML=e.heading,this.dt.headings.push(i),d(this.dt.data,function(i,n){e.data[n]&&(t=document.createElement("td"),e.data[n].nodeName?t.appendChild(e.data[n]):t.innerHTML=e.data[n],t.data=t.innerHTML,e.render&&(t.innerHTML=e.render.call(a,t.data,t,i)),i.appendChild(t))}),e.type&&i.setAttribute("data-type",e.type),e.format&&i.setAttribute("data-format",e.format),e.hasOwnProperty("sortable")&&(i.sortable=e.sortable,i.setAttribute("data-sortable",e.sortable===!0?"true":"false")),this.rebuild(),void this.dt.renderHeader()):(this.dt.insert({headings:[e.heading],data:e.data.map(function(e){return[e]})}),void this.rebuild())},x.prototype.remove=function(e){r(e)?(e.sort(function(e,t){return t-e}),d(e,function(e){this.remove(e)},this)):(this.dt.headings.splice(e,1),d(this.dt.data,function(t){t.removeChild(t.cells[e])})),this.rebuild()},x.prototype.sort=function(e,a,i){var n=this.dt;if(n.hasHeadings&&(e<1||e>n.activeHeadings.length))return!1;n.sorting=!0,e-=1;var s,r=n.data,o=[],l=[],h=0,c=0,p=n.activeHeadings[e];e=p.originalCellIndex,d(r,function(a){var i=a.cells[e],n=i.hasAttribute("data-content")?i.getAttribute("data-content"):i.data,s=n.replace(/(\$|\,|\s|%)/g,"");if("date"===p.getAttribute("data-type")&&t.moment){var r=!1,d=p.hasAttribute("data-format");d&&(r=p.getAttribute("data-format")),s=v(n,r)}parseFloat(s)==s?l[c++]={value:Number(s),row:a}:o[h++]={value:n,row:a}});var u,b;f.contains(p,"asc")||"asc"==a?(u=g(o,-1),b=g(l,-1),s="descending",f.remove(p,"asc"),f.add(p,"desc")):(u=g(l,1),b=g(o,1),s="ascending",f.remove(p,"desc"),f.add(p,"asc")),n.lastTh&&p!=n.lastTh&&(f.remove(n.lastTh,"desc"),f.remove(n.lastTh,"asc")),n.lastTh=p,r=u.concat(b),n.data=[];var m=[];d(r,function(e,t){n.data.push(e.row),null!==e.row.searchIndex&&void 0!==e.row.searchIndex&&m.push(t)},n),n.searchData=m,this.rebuild(),n.update(),i||n.emit("datatable.sort",e,s)},x.prototype.rebuild=function(){var e,t,a,i,n=this.dt,s=[];n.activeRows=[],n.activeHeadings=[],d(n.headings,function(e,t){e.originalCellIndex=t,e.sortable="false"!==e.getAttribute("data-sortable"),n.hiddenColumns.indexOf(t)<0&&n.activeHeadings.push(e)},this),d(n.data,function(r,o){e=r.cloneNode(),t=r.cloneNode(),e.dataIndex=t.dataIndex=o,null!==r.searchIndex&&void 0!==r.searchIndex&&(e.searchIndex=t.searchIndex=r.searchIndex),d(r.cells,function(s){a=s.cloneNode(!0),a.data=s.data,e.appendChild(a),n.hiddenColumns.indexOf(s.cellIndex)<0&&(i=s.cloneNode(!0),i.data=s.data,t.appendChild(i))}),s.push(e),n.activeRows.push(t)}),n.data=s,n.update()};var C=function(e,t){return this.dt=e,this.rows=t,this};C.prototype.build=function(e){var t,a=c("tr"),i=this.dt.headings;return i.length||(i=e.map(function(){return""})),d(i,function(i,n){t=c("td"),e[n]||e[n].length||(e[n]=""),t.innerHTML=e[n],t.data=e[n],a.appendChild(t)}),a},C.prototype.render=function(e){return e},C.prototype.add=function(e){if(r(e)){var t=this.dt;r(e[0])?d(e,function(e,a){t.data.push(this.build(e))},this):t.data.push(this.build(e)),t.data.length&&(t.hasRows=!0),this.update(),t.columns().rebuild()}},C.prototype.remove=function(e){var t=this.dt;r(e)?(e.sort(function(e,t){return t-e}),d(e,function(e,a){t.data.splice(e,1)})):t.data.splice(e,1),this.update(),t.columns().rebuild()},C.prototype.update=function(){d(this.dt.data,function(e,t){e.dataIndex=t})};var y=function(e,t){if(this.initialized=!1,this.options=l(n,t),"string"==typeof e&&(e=document.querySelector(e)),this.initialLayout=e.innerHTML,this.initialSortable=this.options.sortable,this.options.header||(this.options.sortable=!1),null===e.tHead&&(!this.options.data||this.options.data&&!this.options.data.headings)&&(this.options.sortable=!1),e.tBodies.length&&!e.tBodies[0].rows.length&&this.options.data&&!this.options.data.data)throw new Error("You seem to be using the data option, but you've not defined any rows.");this.table=e,this.init()};y.extend=function(e,t){"function"==typeof t?y.prototype[e]=t:y[e]=t};var w=y.prototype;return w.init=function(e){if(this.initialized||f.contains(this.table,"dataTable-table"))return!1;var t=this;this.options=l(this.options,e||{}),this.isIE=!!/(msie|trident)/i.test(navigator.userAgent),this.currentPage=1,this.onFirstPage=!0,this.hiddenColumns=[],this.columnRenderers=[],this.selectedColumns=[],this.render(),setTimeout(function(){t.emit("datatable.init"),t.initialized=!0,t.options.plugins&&d(t.options.plugins,function(e,a){t[a]&&"function"==typeof t[a]&&(t[a]=t[a](e,{each:d,extend:l,classList:f,createElement:c}),e.enabled&&t[a].init&&"function"==typeof t[a].init&&t[a].init())})},10)},w.render=function(e){if(e){switch(e){case"page":this.renderPage();break;case"pager":this.renderPager();break;case"header":this.renderHeader()}return!1}var t=this,a=t.options,i="";if(a.data&&m.call(t),a.ajax){var n=a.ajax,s=new XMLHttpRequest,r=function(e){t.emit("datatable.ajax.progress",e,s)},o=function(e){if(4===s.readyState)if(t.emit("datatable.ajax.loaded",e,s),200===s.status){var a={};a.data=n.load?n.load.call(t,s):s.responseText,a.type="json",n.content&&n.content.type&&(a.type=n.content.type,a=l(a,n.content)),t["import"](a),t.setColumns(!0),t.emit("datatable.ajax.success",e,s)}else t.emit("datatable.ajax.error",e,s)},p=function(e){t.emit("datatable.ajax.error",e,s)},u=function(e){t.emit("datatable.ajax.abort",e,s)};h(s,"progress",r),h(s,"load",o),h(s,"error",p),h(s,"abort",u),t.emit("datatable.ajax.loading",s),s.open("GET","string"==typeof n?a.ajax:a.ajax.url),s.send()}if(t.body=t.table.tBodies[0],t.head=t.table.tHead,t.foot=t.table.tFoot,t.body||(t.body=c("tbody"),t.table.appendChild(t.body)),t.hasRows=t.body.rows.length>0,!t.head){var g=c("thead"),b=c("tr");t.hasRows&&(d(t.body.rows[0].cells,function(){b.appendChild(c("th"))}),g.appendChild(b)),t.head=g,t.table.insertBefore(t.head,t.body),t.hiddenHeader=!a.ajax}if(t.headings=[],t.hasHeadings=t.head.rows.length>0,t.hasHeadings&&(t.header=t.head.rows[0],t.headings=[].slice.call(t.header.cells)),a.header||t.head&&t.table.removeChild(t.table.tHead),a.footer?t.head&&!t.foot&&(t.foot=c("tfoot",{html:t.head.innerHTML}),t.table.appendChild(t.foot)):t.foot&&t.table.removeChild(t.table.tFoot),t.wrapper=c("div",{"class":"dataTable-wrapper dataTable-loading"}),i+="<div class='dataTable-top'>",i+=a.layout.top,i+="</div>",i+="<div class='dataTable-container'></div>",i+="<div class='dataTable-bottom'>",i+=a.layout.bottom,i+="</div>",i=i.replace("{info}","<div class='dataTable-info'></div>"),a.perPageSelect){var v="<div class='dataTable-dropdown'><label>";v+=a.labels.perPage,v+="</label></div>";var x=c("select",{"class":"dataTable-selector"});d(a.perPageSelect,function(e){var t=e===a.perPage,i=new Option(e,e,t,t);x.add(i)}),v=v.replace("{select}",x.outerHTML),i=i.replace("{select}",v)}else i=i.replace("{select}","");if(a.searchable){var C="<div class='dataTable-search'><input class='dataTable-input' placeholder='"+a.labels.placeholder+"' type='text'></div>";i=i.replace("{search}",C)}else i=i.replace("{search}","");t.hasHeadings&&this.render("header"),f.add(t.table,"dataTable-table");var y=c("div",{"class":"dataTable-pagination"}),w=c("ul");y.appendChild(w),i=i.replace(/\{pager\}/g,y.outerHTML),t.wrapper.innerHTML=i,t.container=t.wrapper.querySelector(".dataTable-container"),t.pagers=t.wrapper.querySelectorAll(".dataTable-pagination"),t.label=t.wrapper.querySelector(".dataTable-info"),t.table.parentNode.replaceChild(t.wrapper,t.table),t.container.appendChild(t.table),t.rect=t.table.getBoundingClientRect(),t.data=[].slice.call(t.body.rows),t.activeRows=t.data.slice(),t.activeHeadings=t.headings.slice(),t.update(),a.ajax||t.setColumns(),this.fixHeight(),t.fixColumns(),a.header||f.add(t.wrapper,"no-header"),a.footer||f.add(t.wrapper,"no-footer"),a.sortable&&f.add(t.wrapper,"sortable"),a.searchable&&f.add(t.wrapper,"searchable"),a.fixedHeight&&f.add(t.wrapper,"fixed-height"),a.fixedColumns&&f.add(t.wrapper,"fixed-columns"),t.bindEvents()},w.renderPage=function(){if(this.hasRows&&this.totalPages){this.currentPage>this.totalPages&&(this.currentPage=1);var e=this.currentPage-1,t=a.createDocumentFragment();this.hasHeadings&&(p(this.header,this.isIE),d(this.activeHeadings,function(e){this.header.appendChild(e)},this)),d(this.pages[e],function(e){t.appendChild(this.rows().render(e))},this),this.clear(t),this.onFirstPage=1===this.currentPage,this.onLastPage=this.currentPage===this.lastPage}else this.clear();var i,n=0,s=0,r=0;if(this.totalPages&&(n=this.currentPage-1,s=n*this.options.perPage,r=s+this.pages[n].length,s+=1,i=this.searching?this.searchData.length:this.data.length),this.label&&this.options.labels.info.length){var o=this.options.labels.info.replace("{start}",s).replace("{end}",r).replace("{page}",this.currentPage).replace("{pages}",this.totalPages).replace("{rows}",i);this.label.innerHTML=i?o:""}1==this.currentPage&&this.fixHeight()},w.renderPager=function(){if(p(this.pagers,this.isIE),this.totalPages>1){var e="pager",t=a.createDocumentFragment(),i=this.onFirstPage?1:this.currentPage-1,n=this.onlastPage?this.totalPages:this.currentPage+1;this.options.firstLast&&t.appendChild(u(e,1,this.options.firstText)),this.options.nextPrev&&t.appendChild(u(e,i,this.options.prevText));var s=this.links;this.options.truncatePager&&(s=b(this.links,this.currentPage,this.pages.length,this.options.pagerDelta,this.options.ellipsisText)),f.add(this.links[this.currentPage-1],"active"),d(s,function(e){f.remove(e,"active"),t.appendChild(e)}),f.add(this.links[this.currentPage-1],"active"),this.options.nextPrev&&t.appendChild(u(e,n,this.options.nextText)),this.options.firstLast&&t.appendChild(u(e,this.totalPages,this.options.lastText)),d(this.pagers,function(e){e.appendChild(t.cloneNode(!0))})}},w.renderHeader=function(){var e=this;e.labels=[],e.headings&&e.headings.length&&d(e.headings,function(t,a){if(e.labels[a]=t.textContent,f.contains(t.firstElementChild,"dataTable-sorter")&&(t.innerHTML=t.firstElementChild.innerHTML),t.sortable="false"!==t.getAttribute("data-sortable"),t.originalCellIndex=a,e.options.sortable&&t.sortable){var i=c("a",{href:"#","class":"dataTable-sorter",html:t.innerHTML});t.innerHTML="",t.setAttribute("data-sortable",""),t.appendChild(i)}}),e.fixColumns()},w.bindEvents=function(){var e=this,t=e.options;if(t.perPageSelect){var a=e.wrapper.querySelector(".dataTable-selector");a&&h(a,"change",function(a){t.perPage=parseInt(this.value,10),e.update(),e.fixHeight(),e.emit("datatable.perpage",t.perPage)})}t.searchable&&(e.input=e.wrapper.querySelector(".dataTable-input"),e.input&&h(e.input,"keyup",function(t){e.search(this.value)})),h(e.wrapper,"click",function(a){var i=a.target;"a"===i.nodeName.toLowerCase()&&(i.hasAttribute("data-page")?(e.page(i.getAttribute("data-page")),a.preventDefault()):t.sortable&&f.contains(i,"dataTable-sorter")&&"false"!=i.parentNode.getAttribute("data-sortable")&&(e.columns().sort(e.activeHeadings.indexOf(i.parentNode)+1),a.preventDefault()))})},w.setColumns=function(e){var t=this;e||d(t.data,function(e){d(e.cells,function(e){e.data=e.innerHTML})}),t.options.columns&&t.headings.length&&d(t.options.columns,function(e){r(e.select)||(e.select=[e.select]),e.hasOwnProperty("render")&&"function"==typeof e.render&&(t.selectedColumns=t.selectedColumns.concat(e.select),t.columnRenderers.push({columns:e.select,renderer:e.render})),d(e.select,function(a){var i=t.headings[a];e.type&&i.setAttribute("data-type",e.type),e.format&&i.setAttribute("data-format",e.format),e.hasOwnProperty("sortable")&&i.setAttribute("data-sortable",e.sortable),e.hasOwnProperty("hidden")&&e.hidden!==!1&&t.columns().hide(a),e.hasOwnProperty("sort")&&1===e.select.length&&t.columns().sort(e.select[0]+1,e.sort,!0)})}),t.hasRows&&(d(t.data,function(e,t){e.dataIndex=t,d(e.cells,function(e){e.data=e.innerHTML})}),t.selectedColumns.length&&d(t.data,function(e){d(e.cells,function(a,i){t.selectedColumns.indexOf(i)>-1&&d(t.columnRenderers,function(n){n.columns.indexOf(i)>-1&&(a.innerHTML=n.renderer.call(t,a.data,a,e))})})}),t.columns().rebuild()),t.render("header")},w.destroy=function(){this.table.innerHTML=this.initialLayout,f.remove(this.table,"dataTable-table"),this.wrapper.parentNode.replaceChild(this.table,this.wrapper),this.initialized=!1},w.update=function(){this.paginate(this),this.render("page"),this.links=[];for(var e=this.pages.length;e--;){var t=e+1;this.links[e]=u(0===e?"active":"",t,t)}this.sorting=!1,this.render("pager"),this.rows().update(),this.emit("datatable.update")},w.paginate=function(){var e=this.options.perPage,t=this.activeRows;return this.searching&&(t=[],d(this.searchData,function(e){t.push(this.activeRows[e])},this)),this.pages=t.map(function(a,i){return i%e===0?t.slice(i,i+e):null}).filter(function(e){return e}),this.totalPages=this.lastPage=this.pages.length,this.totalPages},w.fixColumns=function(){if(this.options.fixedColumns&&this.activeHeadings&&this.activeHeadings.length){var e,t=!1;if(this.columnWidths=[],this.table.tHead)d(this.activeHeadings,function(e){e.style.width=""},this),d(this.activeHeadings,function(e,t){var a=e.offsetWidth,i=a/this.rect.width*100;e.style.width=i+"%",this.columnWidths[t]=a},this);else{e=[],t=c("thead");var a=c("tr"),i=this.table.tBodies[0].rows[0].cells;d(i,function(){var t=c("th");a.appendChild(t),e.push(t)}),t.appendChild(a),this.table.insertBefore(t,this.body);var n=[];d(e,function(e,t){var a=e.offsetWidth,i=a/this.rect.width*100;n.push(i),this.columnWidths[t]=a},this),d(this.data,function(e){d(e.cells,function(e,t){this.columns(e.cellIndex).visible()&&(e.style.width=n[t]+"%")},this)},this),this.table.removeChild(t)}}},w.fixHeight=function(){this.options.fixedHeight&&(this.container.style.height=null,this.rect=this.container.getBoundingClientRect(),this.container.style.height=this.rect.height+"px")},w.search=function(e){if(!this.hasRows)return!1;var t=this;return e=e.toLowerCase(),this.currentPage=1,this.searching=!0,this.searchData=[],e.length?(this.clear(),d(this.data,function(a,i){var n=this.searchData.indexOf(a)>-1,s=e.split(" ").reduce(function(e,i){for(var n=!1,s=null,r=null,o=0;o<a.cells.length;o++)if(s=a.cells[o],r=s.hasAttribute("data-content")?s.getAttribute("data-content"):s.textContent,r.toLowerCase().indexOf(i)>-1&&t.columns(s.cellIndex).visible()){n=!0;break}return e&&n},!0);s&&!n?(a.searchIndex=i,this.searchData.push(i)):a.searchIndex=null},this),f.add(this.wrapper,"search-results"),t.searchData.length?t.update():(f.remove(t.wrapper,"search-results"),t.setMessage(t.options.labels.noRows)),void this.emit("datatable.search",e,this.searchData)):(this.searching=!1,this.update(),this.emit("datatable.search",e,this.searchData),f.remove(this.wrapper,"search-results"),!1)},w.page=function(e){return e!=this.currentPage&&(isNaN(e)||(this.currentPage=parseInt(e,10)),!(e>this.pages.length||e<0)&&(this.render("page"),this.render("pager"),void this.emit("datatable.page",e)))},w.sortColumn=function(e,t){this.columns().sort(e,t)},w.insert=function(e){var t=this,a=[];if(s(e)){if(e.headings&&!t.hasHeadings&&!t.hasRows){var i,n=c("tr");d(e.headings,function(e){i=c("th",{html:e}),n.appendChild(i)}),t.head.appendChild(n),t.header=n,t.headings=[].slice.call(n.cells),t.hasHeadings=!0,t.options.sortable=t.initialSortable,t.render("header")}e.data&&r(e.data)&&(a=e.data)}else r(e)&&d(e,function(e){var i=[];d(e,function(e,a){var n=t.labels.indexOf(a);n>-1&&(i[n]=e)}),a.push(i)});a.length&&(t.rows().add(a),t.hasRows=!0),t.update(),t.fixColumns()},w.refresh=function(){this.options.searchable&&(this.input.value="",this.searching=!1),this.currentPage=1,this.onFirstPage=!0,this.update(),this.emit("datatable.refresh")},w.clear=function(e){this.body&&p(this.body,this.isIE);var t=this.body;if(this.body||(t=this.table),e){if("string"==typeof e){var i=a.createDocumentFragment();i.innerHTML=e}t.appendChild(e)}},w["export"]=function(e){if(!this.hasHeadings&&!this.hasRows)return!1;var t,a,n,o,d=this.activeHeadings,h=[],c=[],p={download:!0,skipColumn:[],lineDelimiter:"\n",columnDelimiter:",",tableName:"myTable",replacer:null,space:4};if(!s(e))return!1;var u=l(p,e);if(u.type){if("txt"!==u.type&&"csv"!==u.type||(h[0]=this.header),u.selection)if(isNaN(u.selection)){if(r(u.selection))for(t=0;t<u.selection.length;t++)h=h.concat(this.pages[u.selection[t]-1])}else h=h.concat(this.pages[u.selection-1]);else h=h.concat(this.activeRows);if(h.length){if("txt"===u.type||"csv"===u.type){for(n="",t=0;t<h.length;t++){for(a=0;a<h[t].cells.length;a++)if(u.skipColumn.indexOf(d[a].originalCellIndex)<0&&this.columns(d[a].originalCellIndex).visible()){var f=h[t].texts[a].textContent;f=f.trim(),f=f.replace(/\s{2,}/g," "),f=f.replace(/\n/g,"  "),f=f.replace(/"/g,'""'),f.indexOf(",")>-1&&(f='"'+f+'"'),n+=f+u.columnDelimiter}n=n.trim().substring(0,n.length-1),n+=u.lineDelimiter}n=n.trim().substring(0,n.length-1),u.download&&(n="data:text/csv;charset=utf-8,"+n)}else if("sql"===u.type){for(n="INSERT INTO `"+u.tableName+"` (",t=0;t<d.length;t++)u.skipColumn.indexOf(d[t].originalCellIndex)<0&&this.columns(d[t].originalCellIndex).visible()&&(n+="`"+d[t].textContent+"`,");for(n=n.trim().substring(0,n.length-1),n+=") VALUES ",t=0;t<h.length;t++){for(n+="(",a=0;a<h[t].cells.length;a++)u.skipColumn.indexOf(d[a].originalCellIndex)<0&&this.columns(d[a].originalCellIndex).visible()&&(n+='"'+h[t].cells[a].textContent+'",');n=n.trim().substring(0,n.length-1),n+="),"}n=n.trim().substring(0,n.length-1),n+=";",u.download&&(n="data:application/sql;charset=utf-8,"+n)}else if("json"===u.type){for(a=0;a<h.length;a++)for(c[a]=c[a]||{},t=0;t<d.length;t++)u.skipColumn.indexOf(d[t].originalCellIndex)<0&&this.columns(d[t].originalCellIndex).visible()&&(c[a][d[t].textContent]=h[a].cells[t].textContent);n=JSON.stringify(c,u.replacer,u.space),u.download&&(n="data:application/json;charset=utf-8,"+n)}return u.download&&(u.filename=u.filename||"datatable_export",u.filename+="."+u.type,n=encodeURI(n),o=document.createElement("a"),o.href=n,o.download=u.filename,i.appendChild(o),o.click(),i.removeChild(o)),n}}return!1},w["import"]=function(e){var t=!1,a={lineDelimiter:"\n",columnDelimiter:","};if(!s(e))return!1;if(e=l(a,e),e.data.length||s(e.data)){if("csv"===e.type){t={data:[]};var i=e.data.split(e.lineDelimiter);i.length&&(e.headings&&(t.headings=i[0].split(e.columnDelimiter),i.shift()),d(i,function(a,i){t.data[i]=[];var n=a.split(e.columnDelimiter);n.length&&d(n,function(e){t.data[i].push(e)})}))}else if("json"===e.type){var n=o(e.data);n?(t={headings:[],data:[]},d(n,function(e,a){t.data[a]=[],d(e,function(e,i){t.headings.indexOf(i)<0&&t.headings.push(i),t.data[a].push(e)})})):console.warn("That's not valid JSON!")}s(e.data)&&(t=e.data),t&&this.insert(t)}return!1},w.print=function(){var e=this.activeHeadings,a=this.activeRows,i=c("table"),n=c("thead"),s=c("tbody"),r=c("tr");d(e,function(e){r.appendChild(c("th",{html:e.textContent}))}),n.appendChild(r),d(a,function(e){var t=c("tr");d(e.cells,function(e){t.appendChild(c("td",{html:e.textContent}))}),s.appendChild(t)}),i.appendChild(n),i.appendChild(s);var o=t.open();o.document.body.appendChild(i),o.print()},w.setMessage=function(e){var t=1;this.hasRows&&(t=this.data[0].cells.length),this.clear(c("tr",{html:'<td class="dataTables-empty" colspan="'+t+'">'+e+"</td>"}))},w.columns=function(e){return new x(this,e)},w.rows=function(e){return new C(this,e)},w.on=function(e,t){this.events=this.events||{},this.events[e]=this.events[e]||[],this.events[e].push(t)},w.off=function(e,t){this.events=this.events||{},e in this.events!=!1&&this.events[e].splice(this.events[e].indexOf(t),1)},w.emit=function(e){if(this.events=this.events||{},e in this.events!=!1)for(var t=0;t<this.events[e].length;t++)this.events[e][t].apply(this,Array.prototype.slice.call(arguments,1))},y});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci90YWJsZS5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsInBsdWdpbiIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnbG9iYWwiLCJ0aGlzIiwid2luZG93Iiwid2luIiwiZG9jIiwiZG9jdW1lbnQiLCJib2R5IiwiZGVmYXVsdENvbmZpZyIsInBlclBhZ2UiLCJwZXJQYWdlU2VsZWN0Iiwic29ydGFibGUiLCJzZWFyY2hhYmxlIiwibmV4dFByZXYiLCJmaXJzdExhc3QiLCJwcmV2VGV4dCIsIm5leHRUZXh0IiwiZmlyc3RUZXh0IiwibGFzdFRleHQiLCJlbGxpcHNpc1RleHQiLCJhc2NUZXh0IiwiZGVzY1RleHQiLCJ0cnVuY2F0ZVBhZ2VyIiwicGFnZXJEZWx0YSIsImZpeGVkQ29sdW1ucyIsImZpeGVkSGVpZ2h0IiwiaGVhZGVyIiwiZm9vdGVyIiwibGFiZWxzIiwicGxhY2Vob2xkZXIiLCJub1Jvd3MiLCJpbmZvIiwibGF5b3V0IiwidG9wIiwiYm90dG9tIiwiaXNPYmplY3QiLCJ2YWwiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0pzb24iLCJzdHIiLCJ0IiwiSlNPTiIsInBhcnNlIiwiZSIsImV4dGVuZCIsInNyYyIsInByb3BzIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiZWFjaCIsImFyciIsImZuIiwic2NvcGUiLCJuIiwibGVuZ3RoIiwib24iLCJlbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFbGVtZW50IiwiYSIsImIiLCJkIiwiaW5uZXJIVE1MIiwic2V0QXR0cmlidXRlIiwiZmx1c2giLCJpZSIsIk5vZGVMaXN0IiwiaGFzQ2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiZmlyc3RDaGlsZCIsImJ1dHRvbiIsImMiLCJwIiwiY2xhc3MiLCJodG1sIiwiY2xhc3NMaXN0IiwiYWRkIiwicyIsImNvbnRhaW5zIiwiY2xhc3NOYW1lIiwidHJpbSIsInJlbW92ZSIsInJlcGxhY2UiLCJSZWdFeHAiLCJzcGxpdCIsImpvaW4iLCJtYXRjaCIsInNvcnRJdGVtcyIsImYiLCJ2YWx1ZSIsImciLCJoIiwiaSIsInRydW5jYXRlIiwiZWxsaXBzaXMiLCJqIiwiayIsImwiLCJwdXNoIiwiY2hpbGRyZW4iLCJnZXRBdHRyaWJ1dGUiLCJkYXRhVG9UYWJsZSIsImRhdGEiLCJ0aGVhZCIsInRib2R5Iiwib3B0aW9ucyIsImhlYWRpbmdzIiwidHIiLCJjb2wiLCJ0ZCIsImFwcGVuZENoaWxkIiwicm93cyIsIkVycm9yIiwidGFibGUiLCJ0SGVhZCIsInRCb2RpZXMiLCJwYXJzZURhdGUiLCJjb250ZW50IiwiZm9ybWF0IiwiZGF0ZSIsIm1vbWVudCIsIklTT184NjAxIiwidW5peCIsIkNvbHVtbnMiLCJkdCIsInN3YXAiLCJjb2x1bW5zIiwiY29scyIsIngiLCJ5Iiwib3JkZXIiLCJjZWxsIiwidGVtcCIsImNvbHVtbiIsImNsb25lTm9kZSIsIm9yaWdpbmFsQ2VsbEluZGV4IiwiaGlkZGVuQ29sdW1ucyIsImluZGV4T2YiLCJyb3ciLCJkYXRhSW5kZXgiLCJzZWFyY2hJbmRleCIsInVuZGVmaW5lZCIsImNlbGxzIiwiYWN0aXZlSGVhZGluZ3MiLCJhY3RpdmVSb3dzIiwidXBkYXRlIiwiaGlkZSIsInJlYnVpbGQiLCJzaG93IiwiaW5kZXgiLCJzcGxpY2UiLCJ2aXNpYmxlIiwibWFwIiwidGgiLCJpc05hTiIsInRoYXQiLCJoaWRkZW5IZWFkZXIiLCJoZWFkaW5nIiwibm9kZU5hbWUiLCJyZW5kZXIiLCJ0eXBlIiwicmVuZGVySGVhZGVyIiwiaW5zZXJ0Iiwic2VsZWN0Iiwic29ydCIsImRpcmVjdGlvbiIsImluaXQiLCJoYXNIZWFkaW5ncyIsInNvcnRpbmciLCJkaXIiLCJhbHBoYSIsIm51bWVyaWMiLCJoYXNBdHRyaWJ1dGUiLCJudW0iLCJmb3JtYXR0ZWQiLCJwYXJzZUZsb2F0IiwiTnVtYmVyIiwiYnRtIiwibGFzdFRoIiwiY29uY2F0IiwiaW5kZXhlcyIsInYiLCJzZWFyY2hEYXRhIiwiZW1pdCIsImNlbGxJbmRleCIsIlJvd3MiLCJidWlsZCIsImhhc1Jvd3MiLCJEYXRhVGFibGUiLCJpbml0aWFsaXplZCIsInF1ZXJ5U2VsZWN0b3IiLCJpbml0aWFsTGF5b3V0IiwiaW5pdGlhbFNvcnRhYmxlIiwicHJvdG8iLCJpc0lFIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImN1cnJlbnRQYWdlIiwib25GaXJzdFBhZ2UiLCJjb2x1bW5SZW5kZXJlcnMiLCJzZWxlY3RlZENvbHVtbnMiLCJzZXRUaW1lb3V0IiwicGx1Z2lucyIsImVuYWJsZWQiLCJyZW5kZXJQYWdlIiwicmVuZGVyUGFnZXIiLCJvIiwidGVtcGxhdGUiLCJhamF4IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJQcm9ncmVzcyIsInhockxvYWQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwib2JqIiwibG9hZCIsInJlc3BvbnNlVGV4dCIsInNldENvbHVtbnMiLCJ4aHJGYWlsZWQiLCJ4aHJDYW5jZWxsZWQiLCJvcGVuIiwidXJsIiwic2VuZCIsImhlYWQiLCJmb290IiwidEZvb3QiLCJpbnNlcnRCZWZvcmUiLCJzbGljZSIsIndyYXBwZXIiLCJ3cmFwIiwic2VsZWN0ZWQiLCJvcHRpb24iLCJPcHRpb24iLCJvdXRlckhUTUwiLCJmb3JtIiwidyIsInBhZ2luYXRvciIsImNvbnRhaW5lciIsInBhZ2VycyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsYWJlbCIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZml4SGVpZ2h0IiwiZml4Q29sdW1ucyIsImJpbmRFdmVudHMiLCJ0b3RhbFBhZ2VzIiwiZnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJwYWdlcyIsImNsZWFyIiwib25MYXN0UGFnZSIsImxhc3RQYWdlIiwiaXRlbXMiLCJjdXJyZW50Iiwic2VhcmNoaW5nIiwic3RyaW5nIiwicHJldiIsIm5leHQiLCJvbmxhc3RQYWdlIiwicGFnZXIiLCJsaW5rcyIsInRleHRDb250ZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJsaW5rIiwiaHJlZiIsInNlbGVjdG9yIiwicGFyc2VJbnQiLCJpbnB1dCIsInNlYXJjaCIsInRhcmdldCIsInRvTG93ZXJDYXNlIiwicGFnZSIsInByZXZlbnREZWZhdWx0IiwicmVuZGVyZXIiLCJoaWRkZW4iLCJkZXN0cm95IiwicGFnaW5hdGUiLCJmaWx0ZXIiLCJoZCIsImNvbHVtbldpZHRocyIsInN0eWxlIiwid2lkdGgiLCJvdyIsIm9mZnNldFdpZHRoIiwiciIsIndpZHRocyIsImhlaWdodCIsInF1ZXJ5IiwiaWR4IiwiaW5BcnJheSIsImRvZXNRdWVyeU1hdGNoIiwicmVkdWNlIiwiYm9vbCIsIndvcmQiLCJpbmNsdWRlcyIsInNldE1lc3NhZ2UiLCJzb3J0Q29sdW1uIiwicmVmcmVzaCIsInBhcmVudCIsImhlYWRlcnMiLCJkZWZhdWx0cyIsImRvd25sb2FkIiwic2tpcENvbHVtbiIsImxpbmVEZWxpbWl0ZXIiLCJjb2x1bW5EZWxpbWl0ZXIiLCJ0YWJsZU5hbWUiLCJyZXBsYWNlciIsInNwYWNlIiwic2VsZWN0aW9uIiwidGV4dCIsInRleHRzIiwic3Vic3RyaW5nIiwic3RyaW5naWZ5IiwiZmlsZW5hbWUiLCJlbmNvZGVVUkkiLCJjbGljayIsInNoaWZ0IiwidmFsdWVzIiwianNvbiIsImNvbnNvbGUiLCJ3YXJuIiwicHJpbnQiLCJtZXNzYWdlIiwiY29sc3BhbiIsImV2ZW50IiwiY2FsbGJhY2siLCJldmVudHMiLCJvZmYiLCJhcHBseSIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Q0FpQkEsU0FBVUEsRUFBTUMsR0FDZCxHQUFJQyxHQUFTLFdBRVUsaUJBQVpDLFNBQ1BDLE9BQU9ELFFBQVVGLEVBQVFDLEdBQ0Esa0JBQVhHLFNBQXlCQSxPQUFPQyxJQUM5Q0QsVUFBV0osRUFBUUMsSUFFbkJGLEVBQUtFLEdBQVVELEVBQVFDLElBRVIsbUJBQVhL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RyxXQUFhLFNBQVUyQixHQUN6QixHQUFJQyxHQUFVLENBRVYzVSxNQUFLOEwsVUFDTDZJLEVBQVUzVSxLQUFLeUcsS0FBSyxHQUFHd0MsTUFBTXhGLFFBR2pDekQsS0FBS2lRLE1BQ0RwTSxFQUFjLE1BQ1ZnQixLQUFNLHlDQUNGOFAsRUFDQSxLQUNBRCxFQUNBLFlBU2hCdEksRUFBTW5FLFFBQVUsU0FBVUEsR0FDdEIsTUFBTyxJQUFJSCxHQUFROUgsS0FBTWlJLElBTzdCbUUsRUFBTWxGLEtBQU8sU0FBVUEsR0FDbkIsTUFBTyxJQUFJMEUsR0FBSzVMLEtBQU1rSCxJQVMxQmtGLEVBQU0xSSxHQUFLLFNBQVVrUixFQUFPQyxHQUN4QjdVLEtBQUs4VSxPQUFTOVUsS0FBSzhVLFdBQ25COVUsS0FBSzhVLE9BQU9GLEdBQVM1VSxLQUFLOFUsT0FBT0YsT0FDakM1VSxLQUFLOFUsT0FBT0YsR0FBT3ZPLEtBQUt3TyxJQVM1QnpJLEVBQU0ySSxJQUFNLFNBQVVILEVBQU9DLEdBQ3pCN1UsS0FBSzhVLE9BQVM5VSxLQUFLOFUsV0FDZkYsSUFBUzVVLE1BQUs4VSxTQUFXLEdBQzdCOVUsS0FBSzhVLE9BQU9GLEdBQU9uTCxPQUFPekosS0FBSzhVLE9BQU9GLEdBQU9oTSxRQUFRaU0sR0FBVyxJQVFwRXpJLEVBQU1WLEtBQU8sU0FBVWtKLEdBRW5CLEdBREE1VSxLQUFLOFUsT0FBUzlVLEtBQUs4VSxXQUNmRixJQUFTNVUsTUFBSzhVLFNBQVcsRUFDN0IsSUFBSyxHQUFJL08sR0FBSSxFQUFHQSxFQUFJL0YsS0FBSzhVLE9BQU9GLEdBQU9uUixPQUFRc0MsSUFDM0MvRixLQUFLOFUsT0FBT0YsR0FBTzdPLEdBQUdpUCxNQUFNaFYsS0FBTXdDLE1BQU1KLFVBQVVvTSxNQUFNbE0sS0FBSzJTLFVBQVcsS0FJekVsSiIsImZpbGUiOiJ2ZW5kb3IvdGFibGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqXHJcbiAqIFZhbmlsbGEtRGF0YVRhYmxlc1xyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxNyBLYXJsIFNhdW5kZXJzIChodHRwOi8vbW9iaXVzLm92aClcclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcclxuICpcclxuICogVmVyc2lvbjogMS42LjExXHJcbiAqXHJcbiAqL1xyXG4oZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xyXG4gIHZhciBwbHVnaW4gPSBcIkRhdGFUYWJsZVwiO1xyXG5cclxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHBsdWdpbik7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICBkZWZpbmUoW10sIGZhY3RvcnkocGx1Z2luKSk7XHJcbiAgfSBlbHNlIHtcclxuICAgICAgcm9vdFtwbHVnaW5dID0gZmFjdG9yeShwbHVnaW4pO1xyXG4gIH1cclxufSkodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0aGlzLndpbmRvdyB8fCB0aGlzLmdsb2JhbCwgZnVuY3Rpb24ocGx1Z2luKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgdmFyIHdpbiA9IHdpbmRvdyxcclxuICAgICAgZG9jID0gZG9jdW1lbnQsXHJcbiAgICAgIGJvZHkgPSBkb2MuYm9keTtcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb25maWd1cmF0aW9uXHJcbiAgICogQHR5cCB7T2JqZWN0fVxyXG4gICAqL1xyXG4gIHZhciBkZWZhdWx0Q29uZmlnID0ge1xyXG4gICAgICBwZXJQYWdlOiAxMCxcclxuICAgICAgcGVyUGFnZVNlbGVjdDogWzUsIDEwLCAxNSwgMjAsIDI1XSxcclxuXHJcbiAgICAgIHNvcnRhYmxlOiB0cnVlLFxyXG4gICAgICBzZWFyY2hhYmxlOiB0cnVlLFxyXG5cclxuICAgICAgLy8gUGFnaW5hdGlvblxyXG4gICAgICBuZXh0UHJldjogdHJ1ZSxcclxuICAgICAgZmlyc3RMYXN0OiBmYWxzZSxcclxuICAgICAgcHJldlRleHQ6IFwiJmxzYXF1bztcIixcclxuICAgICAgbmV4dFRleHQ6IFwiJnJzYXF1bztcIixcclxuICAgICAgZmlyc3RUZXh0OiBcIiZsYXF1bztcIixcclxuICAgICAgbGFzdFRleHQ6IFwiJnJhcXVvO1wiLFxyXG4gICAgICBlbGxpcHNpc1RleHQ6IFwiJmhlbGxpcDtcIixcclxuICAgICAgYXNjVGV4dDogXCLilrRcIixcclxuICAgICAgZGVzY1RleHQ6IFwi4pa+XCIsXHJcbiAgICAgIHRydW5jYXRlUGFnZXI6IHRydWUsXHJcbiAgICAgIHBhZ2VyRGVsdGE6IDIsXHJcblxyXG4gICAgICBmaXhlZENvbHVtbnM6IHRydWUsXHJcbiAgICAgIGZpeGVkSGVpZ2h0OiBmYWxzZSxcclxuXHJcbiAgICAgIGhlYWRlcjogdHJ1ZSxcclxuICAgICAgZm9vdGVyOiBmYWxzZSxcclxuXHJcbiAgICAgIC8vIEN1c3RvbWlzZSB0aGUgZGlzcGxheSB0ZXh0XHJcbiAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IFwiU2VhcmNoLi4uXCIsIC8vIFRoZSBzZWFyY2ggaW5wdXQgcGxhY2Vob2xkZXJcclxuICAgICAgICAgIHBlclBhZ2U6IFwie3NlbGVjdH0gZW50cmllcyBwZXIgcGFnZVwiLCAvLyBwZXItcGFnZSBkcm9wZG93biBsYWJlbFxyXG4gICAgICAgICAgbm9Sb3dzOiBcIk5vIGVudHJpZXMgZm91bmRcIiwgLy8gTWVzc2FnZSBzaG93biB3aGVuIHRoZXJlIGFyZSBubyBzZWFyY2ggcmVzdWx0c1xyXG4gICAgICAgICAgaW5mbzogXCJTaG93aW5nIHtzdGFydH0gdG8ge2VuZH0gb2Yge3Jvd3N9IGVudHJpZXNcIiAvL1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gQ3VzdG9taXNlIHRoZSBsYXlvdXRcclxuICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgICB0b3A6IFwie3NlbGVjdH17c2VhcmNofVwiLFxyXG4gICAgICAgICAgYm90dG9tOiBcIntpbmZvfXtwYWdlcn1cIlxyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaXMgaXRlbSBpcyBvYmplY3RcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqL1xyXG4gIHZhciBpc09iamVjdCA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSBcIltvYmplY3QgT2JqZWN0XVwiO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlzIGl0ZW0gaXMgYXJyYXlcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqL1xyXG4gIHZhciBpc0FycmF5ID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGZvciB2YWxpZCBKU09OIHN0cmluZ1xyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gICBzdHJcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufEFycmF5fE9iamVjdH1cclxuICAgKi9cclxuICB2YXIgaXNKc29uID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgICB2YXIgdCA9ICExO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgICAgdCA9IEpTT04ucGFyc2Uoc3RyKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAhKG51bGwgPT09IHQgfHwgKCFpc0FycmF5KHQpICYmICFpc09iamVjdCh0KSkpICYmIHQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWVyZ2Ugb2JqZWN0cyAocmVjY3Vyc2l2ZSlcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHJcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHRcclxuICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICovXHJcbiAgdmFyIGV4dGVuZCA9IGZ1bmN0aW9uIChzcmMsIHByb3BzKSB7XHJcbiAgICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHMpIHtcclxuICAgICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgIHZhciB2YWwgPSBwcm9wc1twcm9wXTtcclxuICAgICAgICAgICAgICBpZiAodmFsICYmIGlzT2JqZWN0KHZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgc3JjW3Byb3BdID0gc3JjW3Byb3BdIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgICBleHRlbmQoc3JjW3Byb3BdLCB2YWwpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHNyY1twcm9wXSA9IHZhbDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHNyYztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBJdGVyYXRvciBoZWxwZXJcclxuICAgKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KX0gICBhcnIgICAgIEFueSBvYmplY3QsIGFycmF5IG9yIGFycmF5LWxpa2UgY29sbGVjdGlvbi5cclxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gICAgICAgICBmbiAgICAgIENhbGxiYWNrXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgICAgICAgICAgc2NvcGUgICBDaGFuZ2UgdGhlIHZhbHVlIG9mIHRoaXNcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHZhciBlYWNoID0gZnVuY3Rpb24gKGFyciwgZm4sIHNjb3BlKSB7XHJcbiAgICAgIHZhciBuO1xyXG4gICAgICBpZiAoaXNPYmplY3QoYXJyKSkge1xyXG4gICAgICAgICAgZm9yIChuIGluIGFycikge1xyXG4gICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJyLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlLCBhcnJbbl0sIG4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvciAobiA9IDA7IG4gPCBhcnIubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlLCBhcnJbbl0sIG4pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRhcmdldFxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gZWxcclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGVcclxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm5cclxuICAgKi9cclxuICB2YXIgb24gPSBmdW5jdGlvbiAoZWwsIGUsIGZuKSB7XHJcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZSwgZm4sIGZhbHNlKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgRE9NIGVsZW1lbnQgbm9kZVxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gICBhIG5vZGVOYW1lXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgIGIgcHJvcGVydGllcyBhbmQgYXR0cmlidXRlc1xyXG4gICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgKi9cclxuICB2YXIgY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgIHZhciBkID0gZG9jLmNyZWF0ZUVsZW1lbnQoYSk7XHJcbiAgICAgIGlmIChiICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGIpIHtcclxuICAgICAgICAgIHZhciBlO1xyXG4gICAgICAgICAgZm9yIChlIGluIGIpIHtcclxuICAgICAgICAgICAgICBpZiAoXCJodG1sXCIgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgICAgZC5pbm5lckhUTUwgPSBiW2VdO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGQuc2V0QXR0cmlidXRlKGUsIGJbZV0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZDtcclxuICB9O1xyXG5cclxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoZWwsIGllKSB7XHJcbiAgICAgIGlmIChlbCBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XHJcbiAgICAgICAgICBlYWNoKGVsLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgIGZsdXNoKGUsIGllKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGllKSB7XHJcbiAgICAgICAgICAgICAgd2hpbGUgKGVsLmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICBlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYnV0dG9uIGhlbHBlclxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gICBjXHJcbiAgICogQHBhcmFtICB7TnVtYmVyfSAgIHBcclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgdFxyXG4gICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgKi9cclxuICB2YXIgYnV0dG9uID0gZnVuY3Rpb24gKGMsIHAsIHQpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XHJcbiAgICAgICAgICBjbGFzczogYyxcclxuICAgICAgICAgIGh0bWw6ICc8YSBocmVmPVwiI1wiIGRhdGEtcGFnZT1cIicgKyBwICsgJ1wiPicgKyB0ICsgXCI8L2E+XCJcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogY2xhc3NMaXN0IHNoaW1cclxuICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAqL1xyXG4gIHZhciBjbGFzc0xpc3QgPSB7XHJcbiAgICAgIGFkZDogZnVuY3Rpb24gKHMsIGEpIHtcclxuICAgICAgICAgIGlmIChzLmNsYXNzTGlzdCkge1xyXG4gICAgICAgICAgICAgIHMuY2xhc3NMaXN0LmFkZChhKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaWYgKCFjbGFzc0xpc3QuY29udGFpbnMocywgYSkpIHtcclxuICAgICAgICAgICAgICAgICAgcy5jbGFzc05hbWUgPSBzLmNsYXNzTmFtZS50cmltKCkgKyBcIiBcIiArIGE7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIChzLCBhKSB7XHJcbiAgICAgICAgICBpZiAocy5jbGFzc0xpc3QpIHtcclxuICAgICAgICAgICAgICBzLmNsYXNzTGlzdC5yZW1vdmUoYSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMocywgYSkpIHtcclxuICAgICAgICAgICAgICAgICAgcy5jbGFzc05hbWUgPSBzLmNsYXNzTmFtZS5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgYS5zcGxpdChcIiBcIikuam9pbihcInxcIikgKyBcIihcXFxcc3wkKVwiLCBcImdpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgXCIgXCJcclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiAocywgYSkge1xyXG4gICAgICAgICAgaWYgKHMpXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHMuY2xhc3NMaXN0ID9cclxuICAgICAgICAgICAgICAgICAgcy5jbGFzc0xpc3QuY29udGFpbnMoYSkgOlxyXG4gICAgICAgICAgICAgICAgICAhIXMuY2xhc3NOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICEhcy5jbGFzc05hbWUubWF0Y2gobmV3IFJlZ0V4cChcIihcXFxcc3xeKVwiICsgYSArIFwiKFxcXFxzfCQpXCIpKTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1YmJsZSBzb3J0IGFsZ29yaXRobVxyXG4gICAqL1xyXG4gIHZhciBzb3J0SXRlbXMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICB2YXIgYywgZDtcclxuICAgICAgaWYgKDEgPT09IGIpIHtcclxuICAgICAgICAgIGMgPSAwO1xyXG4gICAgICAgICAgZCA9IGEubGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGIgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgYyA9IGEubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICBkID0gLTE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgZSA9ICEwOyBlOykge1xyXG4gICAgICAgICAgZSA9ICExO1xyXG4gICAgICAgICAgZm9yICh2YXIgZiA9IGM7IGYgIT0gZDsgZiArPSBiKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGFbZiArIGJdICYmIGFbZl0udmFsdWUgPiBhW2YgKyBiXS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgZyA9IGFbZl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICBoID0gYVtmICsgYl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICBpID0gZztcclxuICAgICAgICAgICAgICAgICAgYVtmXSA9IGg7XHJcbiAgICAgICAgICAgICAgICAgIGFbZiArIGJdID0gaTtcclxuICAgICAgICAgICAgICAgICAgZSA9ICEwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBQYWdlciB0cnVuY2F0aW9uIGFsZ29yaXRobVxyXG4gICAqL1xyXG4gIHZhciB0cnVuY2F0ZSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCBlbGxpcHNpcykge1xyXG4gICAgICBkID0gZCB8fCAyO1xyXG4gICAgICB2YXIgaixcclxuICAgICAgICAgIGUgPSAyICogZCxcclxuICAgICAgICAgIGYgPSBiIC0gZCxcclxuICAgICAgICAgIGcgPSBiICsgZCxcclxuICAgICAgICAgIGggPSBbXSxcclxuICAgICAgICAgIGkgPSBbXTtcclxuICAgICAgaWYgKGIgPCA0IC0gZCArIGUpIHtcclxuICAgICAgICAgIGcgPSAzICsgZTtcclxuICAgICAgfSBlbHNlIGlmIChiID4gYyAtICgzIC0gZCArIGUpKSB7XHJcbiAgICAgICAgICBmID0gYyAtICgyICsgZSk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgayA9IDE7IGsgPD0gYzsgaysrKSB7XHJcbiAgICAgICAgICBpZiAoMSA9PSBrIHx8IGsgPT0gYyB8fCAoayA+PSBmICYmIGsgPD0gZykpIHtcclxuICAgICAgICAgICAgICB2YXIgbCA9IGFbayAtIDFdO1xyXG4gICAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUobCwgXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgaC5wdXNoKGwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVhY2goaCwgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgIHZhciBkID0gYy5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIik7XHJcbiAgICAgICAgICBpZiAoaikge1xyXG4gICAgICAgICAgICAgIHZhciBlID0gai5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIik7XHJcbiAgICAgICAgICAgICAgaWYgKGQgLSBlID09IDIpIGkucHVzaChhW2VdKTtcclxuICAgICAgICAgICAgICBlbHNlIGlmIChkIC0gZSAhPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBmID0gY3JlYXRlRWxlbWVudChcImxpXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcImVsbGlwc2lzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBodG1sOiAnPGEgaHJlZj1cIiNcIj4nICsgZWxsaXBzaXMgKyBcIjwvYT5cIlxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgaS5wdXNoKGYpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGkucHVzaChjKTtcclxuICAgICAgICAgIGogPSBjO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhcnNlIGRhdGEgdG8gSFRNTCB0YWJsZVxyXG4gICAqL1xyXG4gIHZhciBkYXRhVG9UYWJsZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgIHZhciB0aGVhZCA9IGZhbHNlLFxyXG4gICAgICAgICAgdGJvZHkgPSBmYWxzZTtcclxuXHJcbiAgICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMub3B0aW9ucy5kYXRhO1xyXG5cclxuICAgICAgaWYgKGRhdGEuaGVhZGluZ3MpIHtcclxuICAgICAgICAgIHRoZWFkID0gY3JlYXRlRWxlbWVudChcInRoZWFkXCIpO1xyXG4gICAgICAgICAgdmFyIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgZWFjaChkYXRhLmhlYWRpbmdzLCBmdW5jdGlvbiAoY29sKSB7XHJcbiAgICAgICAgICAgICAgdmFyIHRkID0gY3JlYXRlRWxlbWVudChcInRoXCIsIHtcclxuICAgICAgICAgICAgICAgICAgaHRtbDogY29sXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdGhlYWQuYXBwZW5kQ2hpbGQodHIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZGF0YS5kYXRhICYmIGRhdGEuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRib2R5ID0gY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG4gICAgICAgICAgZWFjaChkYXRhLmRhdGEsIGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGluZ3MubGVuZ3RoICE9PSByb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhlIG51bWJlciBvZiByb3dzIGRvIG5vdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGhlYWRpbmdzLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHZhciB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgICAgICAgICBlYWNoKHJvd3MsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdGQgPSBjcmVhdGVFbGVtZW50KFwidGRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaHRtbDogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB0Ym9keS5hcHBlbmRDaGlsZCh0cik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoZWFkKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy50YWJsZS50SGVhZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIHRoaXMudGFibGUucmVtb3ZlQ2hpbGQodGhpcy50YWJsZS50SGVhZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRib2R5KSB7XHJcbiAgICAgICAgICBpZiAodGhpcy50YWJsZS50Qm9kaWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgIHRoaXMudGFibGUucmVtb3ZlQ2hpbGQodGhpcy50YWJsZS50Qm9kaWVzWzBdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMudGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVXNlIG1vbWVudC5qcyB0byBwYXJzZSBjZWxsIGNvbnRlbnRzIGZvciBzb3J0aW5nXHJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBjb250ZW50ICAgICBUaGUgZGF0ZXRpbWUgc3RyaW5nIHRvIHBhcnNlXHJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBmb3JtYXQgICAgICBUaGUgZm9ybWF0IGZvciBtb21lbnQgdG8gdXNlXHJcbiAgICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59ICAgICBEYXRhdGltZSBzdHJpbmcgb3IgZmFsc2VcclxuICAgKi9cclxuICB2YXIgcGFyc2VEYXRlID0gZnVuY3Rpb24gKGNvbnRlbnQsIGZvcm1hdCkge1xyXG4gICAgICB2YXIgZGF0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gbW9tZW50KCkgdGhyb3dzIGEgZml0IGlmIHRoZSBzdHJpbmcgaXNuJ3QgYSB2YWxpZCBkYXRldGltZSBzdHJpbmdcclxuICAgICAgLy8gc28gd2UgbmVlZCB0byBzdXBwbHkgdGhlIGZvcm1hdCB0byB0aGUgY29uc3RydWN0b3IgKGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy1mb3JtYXQvKVxyXG5cclxuICAgICAgLy8gQ29udmVydGluZyB0byBZWVlZTU1ERCBlbnN1cmVzIHdlIGNhbiBhY2N1cmF0ZWx5IHNvcnQgdGhlIGNvbHVtbiBudW1lcmljYWxseVxyXG5cclxuICAgICAgaWYgKGZvcm1hdCkge1xyXG4gICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcclxuICAgICAgICAgIGNhc2UgXCJJU09fODYwMVwiOlxyXG4gICAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoY29udGVudCwgbW9tZW50LklTT184NjAxKS5mb3JtYXQoXCJZWVlZTU1ERFwiKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJSRkNfMjgyMlwiOlxyXG4gICAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoY29udGVudCwgXCJkZGQsIE1NIE1NTSBZWVlZIEhIOm1tOnNzIFpaXCIpLmZvcm1hdChcIllZWVlNTUREXCIpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBcIk1ZU1FMXCI6XHJcbiAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZW50LCBcIllZWVktTU0tREQgaGg6bW06c3NcIikuZm9ybWF0KFwiWVlZWU1NRERcIik7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIFwiVU5JWFwiOlxyXG4gICAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoY29udGVudCkudW5peCgpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIC8vIFVzZXIgZGVmaW5lZCBmb3JtYXQgdXNpbmcgdGhlIGRhdGEtZm9ybWF0IGF0dHJpYnV0ZSBvciBjb2x1bW5zW25dLmZvcm1hdCBvcHRpb25cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZW50LCBmb3JtYXQpLmZvcm1hdChcIllZWVlNTUREXCIpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZGF0ZTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDb2x1bW5zIEFQSVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZSBEYXRhVGFibGUgaW5zdGFuY2VcclxuICAgKiBAcGFyYW0ge01peGVkfSBjb2x1bW5zICBDb2x1bW4gaW5kZXggb3IgYXJyYXkgb2YgY29sdW1uIGluZGV4ZXNcclxuICAgKi9cclxuICB2YXIgQ29sdW1ucyA9IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICB0aGlzLmR0ID0gZHQ7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFN3YXAgdHdvIGNvbHVtbnNcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIENvbHVtbnMucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICBpZiAoY29sdW1ucy5sZW5ndGggJiYgY29sdW1ucy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgIHZhciBjb2xzID0gW107XHJcblxyXG4gICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGNvbHVtbiBpbmRleGVzXHJcbiAgICAgICAgICBlYWNoKHRoaXMuZHQuaGVhZGluZ3MsIGZ1bmN0aW9uIChoLCBpKSB7XHJcbiAgICAgICAgICAgICAgY29scy5wdXNoKGkpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdmFyIHggPSBjb2x1bW5zWzBdO1xyXG4gICAgICAgICAgdmFyIHkgPSBjb2x1bW5zWzFdO1xyXG4gICAgICAgICAgdmFyIGIgPSBjb2xzW3ldO1xyXG4gICAgICAgICAgY29sc1t5XSA9IGNvbHNbeF07XHJcbiAgICAgICAgICBjb2xzW3hdID0gYjtcclxuXHJcbiAgICAgICAgICB0aGlzLm9yZGVyKGNvbHMpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVvcmRlciB0aGUgY29sdW1uc1xyXG4gICAqIEByZXR1cm4ge0FycmF5fSBjb2x1bW5zICBBcnJheSBvZiBvcmRlcmVkIGNvbHVtbiBpbmRleGVzXHJcbiAgICovXHJcbiAgQ29sdW1ucy5wcm90b3R5cGUub3JkZXIgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG5cclxuICAgICAgdmFyIGEsIGIsIGMsIGQsIGgsIHMsIGNlbGwsXHJcbiAgICAgICAgICB0ZW1wID0gW1xyXG4gICAgICAgICAgICAgIFtdLFxyXG4gICAgICAgICAgICAgIFtdLFxyXG4gICAgICAgICAgICAgIFtdLFxyXG4gICAgICAgICAgICAgIFtdXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgZHQgPSB0aGlzLmR0O1xyXG5cclxuICAgICAgLy8gT3JkZXIgdGhlIGhlYWRpbmdzXHJcbiAgICAgIGVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbiwgeCkge1xyXG4gICAgICAgICAgaCA9IGR0LmhlYWRpbmdzW2NvbHVtbl07XHJcbiAgICAgICAgICBzID0gaC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIpICE9PSBcImZhbHNlXCI7XHJcbiAgICAgICAgICBhID0gaC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICBhLm9yaWdpbmFsQ2VsbEluZGV4ID0geDtcclxuICAgICAgICAgIGEuc29ydGFibGUgPSBzO1xyXG5cclxuICAgICAgICAgIHRlbXBbMF0ucHVzaChhKTtcclxuXHJcbiAgICAgICAgICBpZiAoZHQuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNvbHVtbikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgYiA9IGguY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgIGIub3JpZ2luYWxDZWxsSW5kZXggPSB4O1xyXG4gICAgICAgICAgICAgIGIuc29ydGFibGUgPSBzO1xyXG5cclxuICAgICAgICAgICAgICB0ZW1wWzFdLnB1c2goYik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gT3JkZXIgdGhlIHJvdyBjZWxsc1xyXG4gICAgICBlYWNoKGR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgIGMgPSByb3cuY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICBkID0gcm93LmNsb25lTm9kZSgpO1xyXG5cclxuICAgICAgICAgIGMuZGF0YUluZGV4ID0gZC5kYXRhSW5kZXggPSBpO1xyXG5cclxuICAgICAgICAgIGlmIChyb3cuc2VhcmNoSW5kZXggIT09IG51bGwgJiYgcm93LnNlYXJjaEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBjLnNlYXJjaEluZGV4ID0gZC5zZWFyY2hJbmRleCA9IHJvdy5zZWFyY2hJbmRleDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBBcHBlbmQgdGhlIGNlbGwgdG8gdGhlIGZyYWdtZW50IGluIHRoZSBjb3JyZWN0IG9yZGVyXHJcbiAgICAgICAgICBlYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4sIHgpIHtcclxuICAgICAgICAgICAgICBjZWxsID0gcm93LmNlbGxzW2NvbHVtbl0uY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgIGNlbGwuZGF0YSA9IHJvdy5jZWxsc1tjb2x1bW5dLmRhdGE7XHJcbiAgICAgICAgICAgICAgYy5hcHBlbmRDaGlsZChjZWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW4pIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICBjZWxsID0gcm93LmNlbGxzW2NvbHVtbl0uY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICBjZWxsLmRhdGEgPSByb3cuY2VsbHNbY29sdW1uXS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICBkLmFwcGVuZENoaWxkKGNlbGwpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHRlbXBbMl0ucHVzaChjKTtcclxuICAgICAgICAgIHRlbXBbM10ucHVzaChkKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBkdC5oZWFkaW5ncyA9IHRlbXBbMF07XHJcbiAgICAgIGR0LmFjdGl2ZUhlYWRpbmdzID0gdGVtcFsxXTtcclxuXHJcbiAgICAgIGR0LmRhdGEgPSB0ZW1wWzJdO1xyXG4gICAgICBkdC5hY3RpdmVSb3dzID0gdGVtcFszXTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZVxyXG4gICAgICBkdC51cGRhdGUoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBIaWRlIGNvbHVtbnNcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIENvbHVtbnMucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICBpZiAoY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgIHZhciBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgICAgZWFjaChjb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW4pIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICBkdC5oaWRkZW5Db2x1bW5zLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3cgY29sdW1uc1xyXG4gICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICovXHJcbiAgQ29sdW1ucy5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcbiAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgdmFyIGluZGV4LCBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgICAgZWFjaChjb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgaW5kZXggPSBkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1uKTtcclxuICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICBkdC5oaWRkZW5Db2x1bW5zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBjb2x1bW4ocykgdmlzaWJpbGl0eVxyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgQ29sdW1ucy5wcm90b3R5cGUudmlzaWJsZSA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcbiAgICAgIHZhciBjb2xzLCBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICBjb2x1bW5zID0gY29sdW1ucyB8fCBkdC5oZWFkaW5ncy5tYXAoZnVuY3Rpb24gKHRoKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGgub3JpZ2luYWxDZWxsSW5kZXg7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCFpc05hTihjb2x1bW5zKSkge1xyXG4gICAgICAgICAgY29scyA9IGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW5zKSA8IDA7XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb2x1bW5zKSkge1xyXG4gICAgICAgICAgY29scyA9IFtdO1xyXG4gICAgICAgICAgZWFjaChjb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgY29scy5wdXNoKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW4pIDwgMCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbHM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGEgbmV3IGNvbHVtblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXHJcbiAgICovXHJcbiAgQ29sdW1ucy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxyXG4gICAgICAgICAgdGQsIHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG5cclxuICAgICAgaWYgKCF0aGlzLmR0LmhlYWRpbmdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5kdC5pbnNlcnQoe1xyXG4gICAgICAgICAgICAgIGhlYWRpbmdzOiBbZGF0YS5oZWFkaW5nXSxcclxuICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEubWFwKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBbaV07XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5kdC5oaWRkZW5IZWFkZXIpIHtcclxuICAgICAgICAgIGlmIChkYXRhLmhlYWRpbmcubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICB0aC5hcHBlbmRDaGlsZChkYXRhLmhlYWRpbmcpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBkYXRhLmhlYWRpbmc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmR0LmhlYWRpbmdzLnB1c2godGgpO1xyXG5cclxuICAgICAgZWFjaCh0aGlzLmR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgIGlmIChkYXRhLmRhdGFbaV0pIHtcclxuICAgICAgICAgICAgICB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YVtpXS5ub2RlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChkYXRhLmRhdGFbaV0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IGRhdGEuZGF0YVtpXTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHRkLmRhdGEgPSB0ZC5pbm5lckhUTUw7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChkYXRhLnJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSBkYXRhLnJlbmRlci5jYWxsKHRoYXQsIHRkLmRhdGEsIHRkLCByb3cpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoZGF0YS50eXBlKSB7XHJcbiAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIiwgZGF0YS50eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZGF0YS5mb3JtYXQpIHtcclxuICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtZm9ybWF0XCIsIGRhdGEuZm9ybWF0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJzb3J0YWJsZVwiKSkge1xyXG4gICAgICAgICAgdGguc29ydGFibGUgPSBkYXRhLnNvcnRhYmxlO1xyXG4gICAgICAgICAgdGguc2V0QXR0cmlidXRlKFwiZGF0YS1zb3J0YWJsZVwiLCBkYXRhLnNvcnRhYmxlID09PSB0cnVlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnJlYnVpbGQoKTtcclxuXHJcbiAgICAgIHRoaXMuZHQucmVuZGVySGVhZGVyKCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGNvbHVtbihzKVxyXG4gICAqIEBwYXJhbSAge0FycmF5fE51bWJlcn0gc2VsZWN0XHJcbiAgICogQHJldHVybiB7Vm9pZH1cclxuICAgKi9cclxuICBDb2x1bW5zLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc2VsZWN0KSB7XHJcbiAgICAgIGlmIChpc0FycmF5KHNlbGVjdCkpIHtcclxuICAgICAgICAgIC8vIFJlbW92ZSBpbiByZXZlcnNlIG90aGVyd2lzZSB0aGUgaW5kZXhlcyB3aWxsIGJlIGluY29ycmVjdFxyXG4gICAgICAgICAgc2VsZWN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gYiAtIGE7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBlYWNoKHNlbGVjdCwgZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGNvbHVtbik7XHJcbiAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZHQuaGVhZGluZ3Muc3BsaWNlKHNlbGVjdCwgMSk7XHJcblxyXG4gICAgICAgICAgZWFjaCh0aGlzLmR0LmRhdGEsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICByb3cucmVtb3ZlQ2hpbGQocm93LmNlbGxzW3NlbGVjdF0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvcnQgYnkgY29sdW1uXHJcbiAgICogQHBhcmFtICB7aW50fSBjb2x1bW4gLSBUaGUgY29sdW1uIG5vLlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gZGlyZWN0aW9uIC0gYXNjIG9yIGRlc2NcclxuICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAqL1xyXG4gIENvbHVtbnMucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiAoY29sdW1uLCBkaXJlY3Rpb24sIGluaXQpIHtcclxuXHJcbiAgICAgIHZhciBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAvLyBDaGVjayBjb2x1bW4gaXMgcHJlc2VudFxyXG4gICAgICBpZiAoZHQuaGFzSGVhZGluZ3MgJiYgKGNvbHVtbiA8IDEgfHwgY29sdW1uID4gZHQuYWN0aXZlSGVhZGluZ3MubGVuZ3RoKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkdC5zb3J0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgdG8gemVyby1pbmRleGVkXHJcbiAgICAgIGNvbHVtbiA9IGNvbHVtbiAtIDE7XHJcblxyXG4gICAgICB2YXIgZGlyLFxyXG4gICAgICAgICAgcm93cyA9IGR0LmRhdGEsXHJcbiAgICAgICAgICBhbHBoYSA9IFtdLFxyXG4gICAgICAgICAgbnVtZXJpYyA9IFtdLFxyXG4gICAgICAgICAgYSA9IDAsXHJcbiAgICAgICAgICBuID0gMCxcclxuICAgICAgICAgIHRoID0gZHQuYWN0aXZlSGVhZGluZ3NbY29sdW1uXTtcclxuXHJcbiAgICAgIGNvbHVtbiA9IHRoLm9yaWdpbmFsQ2VsbEluZGV4O1xyXG5cclxuICAgICAgZWFjaChyb3dzLCBmdW5jdGlvbiAodHIpIHtcclxuICAgICAgICAgIHZhciBjZWxsID0gdHIuY2VsbHNbY29sdW1uXTtcclxuICAgICAgICAgIHZhciBjb250ZW50ID0gY2VsbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpID8gY2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIDogY2VsbC5kYXRhO1xyXG4gICAgICAgICAgdmFyIG51bSA9IGNvbnRlbnQucmVwbGFjZSgvKFxcJHxcXCx8XFxzfCUpL2csIFwiXCIpO1xyXG5cclxuICAgICAgICAgIC8vIENoZWNrIGZvciBkYXRlIGZvcm1hdCBhbmQgbW9tZW50LmpzXHJcbiAgICAgICAgICBpZiAodGguZ2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIpID09PSBcImRhdGVcIiAmJiB3aW4ubW9tZW50KSB7XHJcbiAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICBmb3JtYXR0ZWQgPSB0aC5oYXNBdHRyaWJ1dGUoXCJkYXRhLWZvcm1hdFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGZvcm1hdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgICBmb3JtYXQgPSB0aC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIG51bSA9IHBhcnNlRGF0ZShjb250ZW50LCBmb3JtYXQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG51bSkgPT0gbnVtKSB7XHJcbiAgICAgICAgICAgICAgbnVtZXJpY1tuKytdID0ge1xyXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKG51bSksXHJcbiAgICAgICAgICAgICAgICAgIHJvdzogdHJcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBhbHBoYVthKytdID0ge1xyXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgcm93OiB0clxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLyogU29ydCBhY2NvcmRpbmcgdG8gZGlyZWN0aW9uIChhc2NlbmRpbmcgb3IgZGVzY2VuZGluZykgKi9cclxuICAgICAgdmFyIHRvcCwgYnRtO1xyXG4gICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKHRoLCBcImFzY1wiKSB8fCBkaXJlY3Rpb24gPT0gXCJhc2NcIikge1xyXG4gICAgICAgICAgdG9wID0gc29ydEl0ZW1zKGFscGhhLCAtMSk7XHJcbiAgICAgICAgICBidG0gPSBzb3J0SXRlbXMobnVtZXJpYywgLTEpO1xyXG4gICAgICAgICAgZGlyID0gXCJkZXNjZW5kaW5nXCI7XHJcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoLCBcImFzY1wiKTtcclxuICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGgsIFwiZGVzY1wiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRvcCA9IHNvcnRJdGVtcyhudW1lcmljLCAxKTtcclxuICAgICAgICAgIGJ0bSA9IHNvcnRJdGVtcyhhbHBoYSwgMSk7XHJcbiAgICAgICAgICBkaXIgPSBcImFzY2VuZGluZ1wiO1xyXG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSh0aCwgXCJkZXNjXCIpO1xyXG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aCwgXCJhc2NcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qIENsZWFyIGFzYy9kZXNjIGNsYXNzIG5hbWVzIGZyb20gdGhlIGxhc3Qgc29ydGVkIGNvbHVtbidzIHRoIGlmIGl0IGlzbid0IHRoZSBzYW1lIGFzIHRoZSBvbmUgdGhhdCB3YXMganVzdCBjbGlja2VkICovXHJcbiAgICAgIGlmIChkdC5sYXN0VGggJiYgdGggIT0gZHQubGFzdFRoKSB7XHJcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGR0Lmxhc3RUaCwgXCJkZXNjXCIpO1xyXG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZShkdC5sYXN0VGgsIFwiYXNjXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkdC5sYXN0VGggPSB0aDtcclxuXHJcbiAgICAgIC8qIFJlb3JkZXIgdGhlIHRhYmxlICovXHJcbiAgICAgIHJvd3MgPSB0b3AuY29uY2F0KGJ0bSk7XHJcblxyXG4gICAgICBkdC5kYXRhID0gW107XHJcbiAgICAgIHZhciBpbmRleGVzID0gW107XHJcblxyXG4gICAgICBlYWNoKHJvd3MsIGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgICBkdC5kYXRhLnB1c2godi5yb3cpO1xyXG5cclxuICAgICAgICAgIGlmICh2LnJvdy5zZWFyY2hJbmRleCAhPT0gbnVsbCAmJiB2LnJvdy5zZWFyY2hJbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9LCBkdCk7XHJcblxyXG4gICAgICBkdC5zZWFyY2hEYXRhID0gaW5kZXhlcztcclxuXHJcbiAgICAgIHRoaXMucmVidWlsZCgpO1xyXG5cclxuICAgICAgZHQudXBkYXRlKCk7XHJcblxyXG4gICAgICBpZiAoIWluaXQpIHtcclxuICAgICAgICAgIGR0LmVtaXQoXCJkYXRhdGFibGUuc29ydFwiLCBjb2x1bW4sIGRpcik7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBSZWJ1aWxkIHRoZSBjb2x1bW5zXHJcbiAgICogQHJldHVybiB7Vm9pZH1cclxuICAgKi9cclxuICBDb2x1bW5zLnByb3RvdHlwZS5yZWJ1aWxkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgYSwgYiwgYywgZCwgZHQgPSB0aGlzLmR0LFxyXG4gICAgICAgICAgdGVtcCA9IFtdO1xyXG5cclxuICAgICAgZHQuYWN0aXZlUm93cyA9IFtdO1xyXG4gICAgICBkdC5hY3RpdmVIZWFkaW5ncyA9IFtdO1xyXG5cclxuICAgICAgZWFjaChkdC5oZWFkaW5ncywgZnVuY3Rpb24gKHRoLCBpKSB7XHJcbiAgICAgICAgICB0aC5vcmlnaW5hbENlbGxJbmRleCA9IGk7XHJcbiAgICAgICAgICB0aC5zb3J0YWJsZSA9IHRoLmdldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIikgIT09IFwiZmFsc2VcIjtcclxuICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoaSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgZHQuYWN0aXZlSGVhZGluZ3MucHVzaCh0aCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgLy8gTG9vcCBvdmVyIHRoZSByb3dzIGFuZCByZW9yZGVyIHRoZSBjZWxsc1xyXG4gICAgICBlYWNoKGR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgIGEgPSByb3cuY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICBiID0gcm93LmNsb25lTm9kZSgpO1xyXG5cclxuICAgICAgICAgIGEuZGF0YUluZGV4ID0gYi5kYXRhSW5kZXggPSBpO1xyXG5cclxuICAgICAgICAgIGlmIChyb3cuc2VhcmNoSW5kZXggIT09IG51bGwgJiYgcm93LnNlYXJjaEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBhLnNlYXJjaEluZGV4ID0gYi5zZWFyY2hJbmRleCA9IHJvdy5zZWFyY2hJbmRleDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBBcHBlbmQgdGhlIGNlbGwgdG8gdGhlIGZyYWdtZW50IGluIHRoZSBjb3JyZWN0IG9yZGVyXHJcbiAgICAgICAgICBlYWNoKHJvdy5jZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgICBjID0gY2VsbC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgYy5kYXRhID0gY2VsbC5kYXRhO1xyXG4gICAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQoYyk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY2VsbC5jZWxsSW5kZXgpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICBkID0gY2VsbC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgIGQuZGF0YSA9IGNlbGwuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgYi5hcHBlbmRDaGlsZChkKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBBcHBlbmQgdGhlIGZyYWdtZW50IHdpdGggdGhlIG9yZGVyZWQgY2VsbHNcclxuICAgICAgICAgIHRlbXAucHVzaChhKTtcclxuICAgICAgICAgIGR0LmFjdGl2ZVJvd3MucHVzaChiKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBkdC5kYXRhID0gdGVtcDtcclxuXHJcbiAgICAgIGR0LnVwZGF0ZSgpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJvd3MgQVBJXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlIERhdGFUYWJsZSBpbnN0YW5jZVxyXG4gICAqIEBwYXJhbSB7QXJyYXl9IHJvd3NcclxuICAgKi9cclxuICB2YXIgUm93cyA9IGZ1bmN0aW9uIChkdCwgcm93cykge1xyXG4gICAgICB0aGlzLmR0ID0gZHQ7XHJcbiAgICAgIHRoaXMucm93cyA9IHJvd3M7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBCdWlsZCBhIG5ldyByb3dcclxuICAgKiBAcGFyYW0gIHtBcnJheX0gcm93XHJcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9XHJcbiAgICovXHJcbiAgUm93cy5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgIHZhciB0ZCwgdHIgPSBjcmVhdGVFbGVtZW50KFwidHJcIik7XHJcblxyXG4gICAgICB2YXIgaGVhZGluZ3MgPSB0aGlzLmR0LmhlYWRpbmdzO1xyXG5cclxuICAgICAgaWYgKCFoZWFkaW5ncy5sZW5ndGgpIHtcclxuICAgICAgICAgIGhlYWRpbmdzID0gcm93Lm1hcChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWFjaChoZWFkaW5ncywgZnVuY3Rpb24gKGgsIGkpIHtcclxuICAgICAgICAgIHRkID0gY3JlYXRlRWxlbWVudChcInRkXCIpO1xyXG5cclxuICAgICAgICAgIC8vIEZpeGVzICMyOVxyXG4gICAgICAgICAgaWYgKCFyb3dbaV0gJiYgIXJvd1tpXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICByb3dbaV0gPSBcIlwiO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRkLmlubmVySFRNTCA9IHJvd1tpXTtcclxuXHJcbiAgICAgICAgICB0ZC5kYXRhID0gcm93W2ldO1xyXG5cclxuICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gdHI7XHJcbiAgfTtcclxuXHJcbiAgUm93cy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICByZXR1cm4gcm93O1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBuZXcgcm93XHJcbiAgICogQHBhcmFtIHtBcnJheX0gc2VsZWN0XHJcbiAgICovXHJcbiAgUm93cy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcbiAgICAgIGlmIChpc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICB2YXIgZHQgPSB0aGlzLmR0O1xyXG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlIHJvd3NcclxuICAgICAgICAgIGlmIChpc0FycmF5KGRhdGFbMF0pKSB7XHJcbiAgICAgICAgICAgICAgZWFjaChkYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGR0LmRhdGEucHVzaCh0aGlzLmJ1aWxkKHJvdykpO1xyXG4gICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBkdC5kYXRhLnB1c2godGhpcy5idWlsZChkYXRhKSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gV2UgbWF5IGhhdmUgYWRkZWQgZGF0YSB0byBhbiBlbXB0eSB0YWJsZVxyXG4gICAgICAgICAgaWYgKCBkdC5kYXRhLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICBkdC5oYXNSb3dzID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICBkdC5jb2x1bW5zKCkucmVidWlsZCgpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIHJvdyhzKVxyXG4gICAqIEBwYXJhbSAge0FycmF5fE51bWJlcn0gc2VsZWN0XHJcbiAgICogQHJldHVybiB7Vm9pZH1cclxuICAgKi9cclxuICBSb3dzLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc2VsZWN0KSB7XHJcblxyXG4gICAgICB2YXIgZHQgPSB0aGlzLmR0O1xyXG5cclxuICAgICAgaWYgKGlzQXJyYXkoc2VsZWN0KSkge1xyXG4gICAgICAgICAgLy8gUmVtb3ZlIGluIHJldmVyc2Ugb3RoZXJ3aXNlIHRoZSBpbmRleGVzIHdpbGwgYmUgaW5jb3JyZWN0XHJcbiAgICAgICAgICBzZWxlY3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGVhY2goc2VsZWN0LCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgZHQuZGF0YS5zcGxpY2Uocm93LCAxKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZHQuZGF0YS5zcGxpY2Uoc2VsZWN0LCAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgZHQuY29sdW1ucygpLnJlYnVpbGQoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgcm93IGluZGV4ZXNcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIFJvd3MucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgZWFjaCh0aGlzLmR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgIHJvdy5kYXRhSW5kZXggPSBpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gIC8vICAgIE1BSU4gTElCICAgIC8vXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgdmFyIERhdGFUYWJsZSA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyB1c2VyIG9wdGlvbnNcclxuICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiB0YWJsZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhYmxlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5pbml0aWFsTGF5b3V0ID0gdGFibGUuaW5uZXJIVE1MO1xyXG4gICAgICB0aGlzLmluaXRpYWxTb3J0YWJsZSA9IHRoaXMub3B0aW9ucy5zb3J0YWJsZTtcclxuXHJcbiAgICAgIC8vIERpc2FibGUgbWFudWFsIHNvcnRpbmcgaWYgbm8gaGVhZGVyIGlzIHByZXNlbnQgKCM0KVxyXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5oZWFkZXIpIHtcclxuICAgICAgICAgIHRoaXMub3B0aW9ucy5zb3J0YWJsZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGFibGUudEhlYWQgPT09IG51bGwpIHtcclxuICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRhdGEgfHxcclxuICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmRhdGEgJiYgIXRoaXMub3B0aW9ucy5kYXRhLmhlYWRpbmdzKVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNvcnRhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0YWJsZS50Qm9kaWVzLmxlbmd0aCAmJiAhdGFibGUudEJvZGllc1swXS5yb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGF0YS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgIFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgdGhlIGRhdGEgb3B0aW9uLCBidXQgeW91J3ZlIG5vdCBkZWZpbmVkIGFueSByb3dzLlwiXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRhYmxlID0gdGFibGU7XHJcblxyXG4gICAgICB0aGlzLmluaXQoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBBZGQgY3VzdG9tIHByb3BlcnR5IG9yIG1ldGhvZCB0byBleHRlbmQgRGF0YVRhYmxlXHJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBwcm9wICAgIC0gTWV0aG9kIG5hbWUgb3IgcHJvcGVydHlcclxuICAgKiBAcGFyYW0gIHtNaXhlZH0gdmFsICAgICAgLSBGdW5jdGlvbiBvciBwcm9wZXJ0eSB2YWx1ZVxyXG4gICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICovXHJcbiAgRGF0YVRhYmxlLmV4dGVuZCA9IGZ1bmN0aW9uKHByb3AsIHZhbCkge1xyXG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBEYXRhVGFibGUucHJvdG90eXBlW3Byb3BdID0gdmFsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgRGF0YVRhYmxlW3Byb3BdID0gdmFsO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHByb3RvID0gRGF0YVRhYmxlLnByb3RvdHlwZTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgaW5zdGFuY2VcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICBpZiAodGhpcy5pbml0aWFsaXplZCB8fCBjbGFzc0xpc3QuY29udGFpbnModGhpcy50YWJsZSwgXCJkYXRhVGFibGUtdGFibGVcIikpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHRoaXMub3B0aW9ucywgb3B0aW9ucyB8fCB7fSk7XHJcblxyXG4gICAgICAvLyBJRSBkZXRlY3Rpb25cclxuICAgICAgdGhpcy5pc0lFID0gISEvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgIHRoaXMub25GaXJzdFBhZ2UgPSB0cnVlO1xyXG5cclxuICAgICAgdGhpcy5oaWRkZW5Db2x1bW5zID0gW107XHJcbiAgICAgIHRoaXMuY29sdW1uUmVuZGVyZXJzID0gW107XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRDb2x1bW5zID0gW107XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcigpO1xyXG5cclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuaW5pdFwiKTtcclxuICAgICAgICAgIHRoYXQuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIGlmICh0aGF0Lm9wdGlvbnMucGx1Z2lucykge1xyXG4gICAgICAgICAgICAgIGVhY2godGhhdC5vcHRpb25zLnBsdWdpbnMsIGZ1bmN0aW9uKG9wdGlvbnMsIHBsdWdpbikge1xyXG4gICAgICAgICAgICAgICAgICBpZiAodGhhdFtwbHVnaW5dICYmIHR5cGVvZiB0aGF0W3BsdWdpbl0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhhdFtwbHVnaW5dID0gdGhhdFtwbHVnaW5dKG9wdGlvbnMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoOiBlYWNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZDogZXh0ZW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdDogY2xhc3NMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIC8vIEluaXQgcGx1Z2luXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5lbmFibGVkICYmIHRoYXRbcGx1Z2luXS5pbml0ICYmIHR5cGVvZiB0aGF0W3BsdWdpbl0uaW5pdCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdFtwbHVnaW5dLmluaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9LCAxMCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyIHRoZSBpbnN0YW5jZVxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVxyXG4gICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgY2FzZSBcInBhZ2VcIjpcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlclBhZ2UoKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJwYWdlclwiOlxyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyUGFnZXIoKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJoZWFkZXJcIjpcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlckhlYWRlcigpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxyXG4gICAgICAgICAgbyA9IHRoYXQub3B0aW9ucyxcclxuICAgICAgICAgIHRlbXBsYXRlID0gXCJcIjtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgZGF0YSB0byBIVE1MXHJcbiAgICAgIGlmIChvLmRhdGEpIHtcclxuICAgICAgICAgIGRhdGFUb1RhYmxlLmNhbGwodGhhdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvLmFqYXgpIHtcclxuICAgICAgICAgIHZhciBhamF4ID0gby5hamF4O1xyXG4gICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgICAgICAgIHZhciB4aHJQcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLmFqYXgucHJvZ3Jlc3NcIiwgZSwgeGhyKTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgdmFyIHhockxvYWQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5sb2FkZWRcIiwgZSwgeGhyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhID0gYWpheC5sb2FkID8gYWpheC5sb2FkLmNhbGwodGhhdCwgeGhyKSA6IHhoci5yZXNwb25zZVRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPSBcImpzb25cIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYWpheC5jb250ZW50ICYmIGFqYXguY29udGVudC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPSBhamF4LmNvbnRlbnQudHlwZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gZXh0ZW5kKG9iaiwgYWpheC5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGF0LmltcG9ydChvYmopO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0Q29sdW1ucyh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5zdWNjZXNzXCIsIGUsIHhocik7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5lcnJvclwiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB2YXIgeGhyRmFpbGVkID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5lcnJvclwiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB2YXIgeGhyQ2FuY2VsbGVkID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5hYm9ydFwiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBvbih4aHIsIFwicHJvZ3Jlc3NcIiwgeGhyUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgb24oeGhyLCBcImxvYWRcIiwgeGhyTG9hZCk7XHJcbiAgICAgICAgICBvbih4aHIsIFwiZXJyb3JcIiwgeGhyRmFpbGVkKTtcclxuICAgICAgICAgIG9uKHhociwgXCJhYm9ydFwiLCB4aHJDYW5jZWxsZWQpO1xyXG5cclxuICAgICAgICAgIHRoYXQuZW1pdChcImRhdGF0YWJsZS5hamF4LmxvYWRpbmdcIiwgeGhyKTtcclxuXHJcbiAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB0eXBlb2YgYWpheCA9PT0gXCJzdHJpbmdcIiA/IG8uYWpheCA6IG8uYWpheC51cmwpO1xyXG4gICAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU3RvcmUgcmVmZXJlbmNlc1xyXG4gICAgICB0aGF0LmJvZHkgPSB0aGF0LnRhYmxlLnRCb2RpZXNbMF07XHJcbiAgICAgIHRoYXQuaGVhZCA9IHRoYXQudGFibGUudEhlYWQ7XHJcbiAgICAgIHRoYXQuZm9vdCA9IHRoYXQudGFibGUudEZvb3Q7XHJcblxyXG4gICAgICBpZiAoIXRoYXQuYm9keSkge1xyXG4gICAgICAgICAgdGhhdC5ib2R5ID0gY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG5cclxuICAgICAgICAgIHRoYXQudGFibGUuYXBwZW5kQ2hpbGQodGhhdC5ib2R5KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhhdC5oYXNSb3dzID0gdGhhdC5ib2R5LnJvd3MubGVuZ3RoID4gMDtcclxuXHJcbiAgICAgIC8vIE1ha2UgYSB0SGVhZCBpZiB0aGVyZSBpc24ndCBvbmUgKGZpeGVzICM4KVxyXG4gICAgICBpZiAoIXRoYXQuaGVhZCkge1xyXG4gICAgICAgICAgdmFyIGggPSBjcmVhdGVFbGVtZW50KFwidGhlYWRcIik7XHJcbiAgICAgICAgICB2YXIgdCA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuXHJcbiAgICAgICAgICBpZiAodGhhdC5oYXNSb3dzKSB7XHJcbiAgICAgICAgICAgICAgZWFjaCh0aGF0LmJvZHkucm93c1swXS5jZWxscywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICB0LmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJ0aFwiKSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIGguYXBwZW5kQ2hpbGQodCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhhdC5oZWFkID0gaDtcclxuXHJcbiAgICAgICAgICB0aGF0LnRhYmxlLmluc2VydEJlZm9yZSh0aGF0LmhlYWQsIHRoYXQuYm9keSk7XHJcblxyXG4gICAgICAgICAgdGhhdC5oaWRkZW5IZWFkZXIgPSAhby5hamF4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGF0LmhlYWRpbmdzID0gW107XHJcbiAgICAgIHRoYXQuaGFzSGVhZGluZ3MgPSB0aGF0LmhlYWQucm93cy5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgaWYgKHRoYXQuaGFzSGVhZGluZ3MpIHtcclxuICAgICAgICAgIHRoYXQuaGVhZGVyID0gdGhhdC5oZWFkLnJvd3NbMF07XHJcbiAgICAgICAgICB0aGF0LmhlYWRpbmdzID0gW10uc2xpY2UuY2FsbCh0aGF0LmhlYWRlci5jZWxscyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEhlYWRlclxyXG4gICAgICBpZiAoIW8uaGVhZGVyKSB7XHJcbiAgICAgICAgICBpZiAodGhhdC5oZWFkKSB7XHJcbiAgICAgICAgICAgICAgdGhhdC50YWJsZS5yZW1vdmVDaGlsZCh0aGF0LnRhYmxlLnRIZWFkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRm9vdGVyXHJcbiAgICAgIGlmIChvLmZvb3Rlcikge1xyXG4gICAgICAgICAgaWYgKHRoYXQuaGVhZCAmJiAhdGhhdC5mb290KSB7XHJcbiAgICAgICAgICAgICAgdGhhdC5mb290ID0gY3JlYXRlRWxlbWVudChcInRmb290XCIsIHtcclxuICAgICAgICAgICAgICAgICAgaHRtbDogdGhhdC5oZWFkLmlubmVySFRNTFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHRoYXQudGFibGUuYXBwZW5kQ2hpbGQodGhhdC5mb290KTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICh0aGF0LmZvb3QpIHtcclxuICAgICAgICAgICAgICB0aGF0LnRhYmxlLnJlbW92ZUNoaWxkKHRoYXQudGFibGUudEZvb3QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBCdWlsZFxyXG4gICAgICB0aGF0LndyYXBwZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcclxuICAgICAgICAgIGNsYXNzOiBcImRhdGFUYWJsZS13cmFwcGVyIGRhdGFUYWJsZS1sb2FkaW5nXCJcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBUZW1wbGF0ZSBmb3IgY3VzdG9tIGxheW91dHNcclxuICAgICAgdGVtcGxhdGUgKz0gXCI8ZGl2IGNsYXNzPSdkYXRhVGFibGUtdG9wJz5cIjtcclxuICAgICAgdGVtcGxhdGUgKz0gby5sYXlvdXQudG9wO1xyXG4gICAgICB0ZW1wbGF0ZSArPSBcIjwvZGl2PlwiO1xyXG4gICAgICB0ZW1wbGF0ZSArPSBcIjxkaXYgY2xhc3M9J2RhdGFUYWJsZS1jb250YWluZXInPjwvZGl2PlwiO1xyXG4gICAgICB0ZW1wbGF0ZSArPSBcIjxkaXYgY2xhc3M9J2RhdGFUYWJsZS1ib3R0b20nPlwiO1xyXG4gICAgICB0ZW1wbGF0ZSArPSBvLmxheW91dC5ib3R0b207XHJcbiAgICAgIHRlbXBsYXRlICs9IFwiPC9kaXY+XCI7XHJcblxyXG4gICAgICAvLyBJbmZvIHBsYWNlbWVudFxyXG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoXCJ7aW5mb31cIiwgXCI8ZGl2IGNsYXNzPSdkYXRhVGFibGUtaW5mbyc+PC9kaXY+XCIpO1xyXG5cclxuICAgICAgLy8gUGVyIFBhZ2UgU2VsZWN0XHJcbiAgICAgIGlmIChvLnBlclBhZ2VTZWxlY3QpIHtcclxuICAgICAgICAgIHZhciB3cmFwID0gXCI8ZGl2IGNsYXNzPSdkYXRhVGFibGUtZHJvcGRvd24nPjxsYWJlbD5cIjtcclxuICAgICAgICAgIHdyYXAgKz0gby5sYWJlbHMucGVyUGFnZTtcclxuICAgICAgICAgIHdyYXAgKz0gXCI8L2xhYmVsPjwvZGl2PlwiO1xyXG5cclxuICAgICAgICAgIC8vIENyZWF0ZSB0aGUgc2VsZWN0XHJcbiAgICAgICAgICB2YXIgc2VsZWN0ID0gY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XHJcbiAgICAgICAgICAgICAgY2xhc3M6IFwiZGF0YVRhYmxlLXNlbGVjdG9yXCJcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIENyZWF0ZSB0aGUgb3B0aW9uc1xyXG4gICAgICAgICAgZWFjaChvLnBlclBhZ2VTZWxlY3QsIGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSB2YWwgPT09IG8ucGVyUGFnZTtcclxuICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gbmV3IE9wdGlvbih2YWwsIHZhbCwgc2VsZWN0ZWQsIHNlbGVjdGVkKTtcclxuICAgICAgICAgICAgICBzZWxlY3QuYWRkKG9wdGlvbik7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBDdXN0b20gbGFiZWxcclxuICAgICAgICAgIHdyYXAgPSB3cmFwLnJlcGxhY2UoXCJ7c2VsZWN0fVwiLCBzZWxlY3Qub3V0ZXJIVE1MKTtcclxuXHJcbiAgICAgICAgICAvLyBTZWxlY3RvciBwbGFjZW1lbnRcclxuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntzZWxlY3R9XCIsIHdyYXApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKFwie3NlbGVjdH1cIiwgXCJcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFNlYXJjaGFibGVcclxuICAgICAgaWYgKG8uc2VhcmNoYWJsZSkge1xyXG4gICAgICAgICAgdmFyIGZvcm0gPVxyXG4gICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZGF0YVRhYmxlLXNlYXJjaCc+PGlucHV0IGNsYXNzPSdkYXRhVGFibGUtaW5wdXQnIHBsYWNlaG9sZGVyPSdcIiArXHJcbiAgICAgICAgICAgICAgby5sYWJlbHMucGxhY2Vob2xkZXIgK1xyXG4gICAgICAgICAgICAgIFwiJyB0eXBlPSd0ZXh0Jz48L2Rpdj5cIjtcclxuXHJcbiAgICAgICAgICAvLyBTZWFyY2ggaW5wdXQgcGxhY2VtZW50XHJcbiAgICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoXCJ7c2VhcmNofVwiLCBmb3JtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntzZWFyY2h9XCIsIFwiXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhhdC5oYXNIZWFkaW5ncykge1xyXG4gICAgICAgICAgLy8gU29ydGFibGVcclxuICAgICAgICAgIHRoaXMucmVuZGVyKFwiaGVhZGVyXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBZGQgdGFibGUgY2xhc3NcclxuICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LnRhYmxlLCBcImRhdGFUYWJsZS10YWJsZVwiKTtcclxuXHJcbiAgICAgIC8vIFBhZ2luYXRvclxyXG4gICAgICB2YXIgdyA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xyXG4gICAgICAgICAgY2xhc3M6IFwiZGF0YVRhYmxlLXBhZ2luYXRpb25cIlxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHBhZ2luYXRvciA9IGNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcclxuICAgICAgdy5hcHBlbmRDaGlsZChwYWdpbmF0b3IpO1xyXG5cclxuICAgICAgLy8gUGFnZXIocykgcGxhY2VtZW50XHJcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvXFx7cGFnZXJcXH0vZywgdy5vdXRlckhUTUwpO1xyXG5cclxuICAgICAgdGhhdC53cmFwcGVyLmlubmVySFRNTCA9IHRlbXBsYXRlO1xyXG5cclxuICAgICAgdGhhdC5jb250YWluZXIgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5kYXRhVGFibGUtY29udGFpbmVyXCIpO1xyXG5cclxuICAgICAgdGhhdC5wYWdlcnMgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvckFsbChcIi5kYXRhVGFibGUtcGFnaW5hdGlvblwiKTtcclxuXHJcbiAgICAgIHRoYXQubGFiZWwgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5kYXRhVGFibGUtaW5mb1wiKTtcclxuXHJcbiAgICAgIC8vIEluc2VydCBpbiB0byBET00gdHJlZVxyXG4gICAgICB0aGF0LnRhYmxlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoYXQud3JhcHBlciwgdGhhdC50YWJsZSk7XHJcbiAgICAgIHRoYXQuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoYXQudGFibGUpO1xyXG5cclxuICAgICAgLy8gU3RvcmUgdGhlIHRhYmxlIGRpbWVuc2lvbnNcclxuICAgICAgdGhhdC5yZWN0ID0gdGhhdC50YWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgcm93cyB0byBhcnJheSBmb3IgcHJvY2Vzc2luZ1xyXG4gICAgICB0aGF0LmRhdGEgPSBbXS5zbGljZS5jYWxsKHRoYXQuYm9keS5yb3dzKTtcclxuICAgICAgdGhhdC5hY3RpdmVSb3dzID0gdGhhdC5kYXRhLnNsaWNlKCk7XHJcbiAgICAgIHRoYXQuYWN0aXZlSGVhZGluZ3MgPSB0aGF0LmhlYWRpbmdzLnNsaWNlKCk7XHJcblxyXG4gICAgICAvLyBVcGRhdGVcclxuICAgICAgdGhhdC51cGRhdGUoKTtcclxuXHJcbiAgICAgIGlmICghby5hamF4KSB7XHJcbiAgICAgICAgICB0aGF0LnNldENvbHVtbnMoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRml4IGhlaWdodFxyXG4gICAgICB0aGlzLmZpeEhlaWdodCgpO1xyXG5cclxuICAgICAgLy8gRml4IGNvbHVtbnNcclxuICAgICAgdGhhdC5maXhDb2x1bW5zKCk7XHJcblxyXG4gICAgICAvLyBDbGFzcyBuYW1lc1xyXG4gICAgICBpZiAoIW8uaGVhZGVyKSB7XHJcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQud3JhcHBlciwgXCJuby1oZWFkZXJcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghby5mb290ZXIpIHtcclxuICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC53cmFwcGVyLCBcIm5vLWZvb3RlclwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG8uc29ydGFibGUpIHtcclxuICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC53cmFwcGVyLCBcInNvcnRhYmxlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoby5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQud3JhcHBlciwgXCJzZWFyY2hhYmxlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoby5maXhlZEhlaWdodCkge1xyXG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LndyYXBwZXIsIFwiZml4ZWQtaGVpZ2h0XCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoby5maXhlZENvbHVtbnMpIHtcclxuICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC53cmFwcGVyLCBcImZpeGVkLWNvbHVtbnNcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoYXQuYmluZEV2ZW50cygpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbmRlciB0aGUgcGFnZVxyXG4gICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8ucmVuZGVyUGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMuaGFzUm93cyAmJiB0aGlzLnRvdGFsUGFnZXMpIHtcclxuICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlID4gdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gVXNlIGEgZnJhZ21lbnQgdG8gbGltaXQgdG91Y2hpbmcgdGhlIERPTVxyXG4gICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jdXJyZW50UGFnZSAtIDEsXHJcbiAgICAgICAgICAgICAgZnJhZyA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuaGFzSGVhZGluZ3MpIHtcclxuICAgICAgICAgICAgICBmbHVzaCh0aGlzLmhlYWRlciwgdGhpcy5pc0lFKTtcclxuXHJcbiAgICAgICAgICAgICAgZWFjaCh0aGlzLmFjdGl2ZUhlYWRpbmdzLCBmdW5jdGlvbiAodGgpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXIuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGVhY2godGhpcy5wYWdlc1tpbmRleF0sIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKHRoaXMucm93cygpLnJlbmRlcihyb3cpKTtcclxuICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgIHRoaXMuY2xlYXIoZnJhZyk7XHJcblxyXG4gICAgICAgICAgdGhpcy5vbkZpcnN0UGFnZSA9IHRoaXMuY3VycmVudFBhZ2UgPT09IDE7XHJcbiAgICAgICAgICB0aGlzLm9uTGFzdFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlID09PSB0aGlzLmxhc3RQYWdlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgdGhlIGluZm9cclxuICAgICAgdmFyIGN1cnJlbnQgPSAwLFxyXG4gICAgICAgICAgZiA9IDAsXHJcbiAgICAgICAgICB0ID0gMCxcclxuICAgICAgICAgIGl0ZW1zO1xyXG5cclxuICAgICAgaWYgKHRoaXMudG90YWxQYWdlcykge1xyXG4gICAgICAgICAgY3VycmVudCA9IHRoaXMuY3VycmVudFBhZ2UgLSAxO1xyXG4gICAgICAgICAgZiA9IGN1cnJlbnQgKiB0aGlzLm9wdGlvbnMucGVyUGFnZTtcclxuICAgICAgICAgIHQgPSBmICsgdGhpcy5wYWdlc1tjdXJyZW50XS5sZW5ndGg7XHJcbiAgICAgICAgICBmID0gZiArIDE7XHJcbiAgICAgICAgICBpdGVtcyA9ICEhdGhpcy5zZWFyY2hpbmcgPyB0aGlzLnNlYXJjaERhdGEubGVuZ3RoIDogdGhpcy5kYXRhLmxlbmd0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMubGFiZWwgJiYgdGhpcy5vcHRpb25zLmxhYmVscy5pbmZvLmxlbmd0aCkge1xyXG4gICAgICAgICAgLy8gQ1VTVE9NIExBQkVMU1xyXG4gICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXMub3B0aW9ucy5sYWJlbHMuaW5mb1xyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKFwie3N0YXJ0fVwiLCBmKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKFwie2VuZH1cIiwgdClcclxuICAgICAgICAgICAgICAucmVwbGFjZShcIntwYWdlfVwiLCB0aGlzLmN1cnJlbnRQYWdlKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKFwie3BhZ2VzfVwiLCB0aGlzLnRvdGFsUGFnZXMpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ7cm93c31cIiwgaXRlbXMpO1xyXG5cclxuICAgICAgICAgIHRoaXMubGFiZWwuaW5uZXJIVE1MID0gaXRlbXMgPyBzdHJpbmcgOiBcIlwiO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA9PSAxKSB7XHJcbiAgICAgICAgICB0aGlzLmZpeEhlaWdodCgpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyIHRoZSBwYWdlcihzKVxyXG4gICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8ucmVuZGVyUGFnZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZsdXNoKHRoaXMucGFnZXJzLCB0aGlzLmlzSUUpO1xyXG5cclxuICAgICAgaWYgKHRoaXMudG90YWxQYWdlcyA+IDEpIHtcclxuICAgICAgICAgIHZhciBjID0gXCJwYWdlclwiLFxyXG4gICAgICAgICAgICAgIGZyYWcgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG4gICAgICAgICAgICAgIHByZXYgPSB0aGlzLm9uRmlyc3RQYWdlID8gMSA6IHRoaXMuY3VycmVudFBhZ2UgLSAxLFxyXG4gICAgICAgICAgICAgIG5leHQgPSB0aGlzLm9ubGFzdFBhZ2UgPyB0aGlzLnRvdGFsUGFnZXMgOiB0aGlzLmN1cnJlbnRQYWdlICsgMTtcclxuXHJcbiAgICAgICAgICAvLyBmaXJzdCBidXR0b25cclxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlyc3RMYXN0KSB7XHJcbiAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChidXR0b24oYywgMSwgdGhpcy5vcHRpb25zLmZpcnN0VGV4dCkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIHByZXYgYnV0dG9uXHJcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5leHRQcmV2KSB7XHJcbiAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChidXR0b24oYywgcHJldiwgdGhpcy5vcHRpb25zLnByZXZUZXh0KSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIHBhZ2VyID0gdGhpcy5saW5rcztcclxuXHJcbiAgICAgICAgICAvLyB0cnVuY2F0ZSB0aGUgbGlua3NcclxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJ1bmNhdGVQYWdlcikge1xyXG4gICAgICAgICAgICAgIHBhZ2VyID0gdHJ1bmNhdGUoXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMubGlua3MsXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGFnZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFnZXJEZWx0YSxcclxuICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmVsbGlwc2lzVGV4dFxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gYWN0aXZlIHBhZ2UgbGlua1xyXG4gICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGlzLmxpbmtzW3RoaXMuY3VycmVudFBhZ2UgLSAxXSwgXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgLy8gYXBwZW5kIHRoZSBsaW5rc1xyXG4gICAgICAgICAgZWFjaChwYWdlciwgZnVuY3Rpb24gKHApIHtcclxuICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHAsIFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoaXMubGlua3NbdGhpcy5jdXJyZW50UGFnZSAtIDFdLCBcImFjdGl2ZVwiKTtcclxuXHJcbiAgICAgICAgICAvLyBuZXh0IGJ1dHRvblxyXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uZXh0UHJldikge1xyXG4gICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoYnV0dG9uKGMsIG5leHQsIHRoaXMub3B0aW9ucy5uZXh0VGV4dCkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIGZpcnN0IGJ1dHRvblxyXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maXJzdExhc3QpIHtcclxuICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1dHRvbihjLCB0aGlzLnRvdGFsUGFnZXMsIHRoaXMub3B0aW9ucy5sYXN0VGV4dCkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFdlIG1heSBoYXZlIG1vcmUgdGhhbiBvbmUgcGFnZXJcclxuICAgICAgICAgIGVhY2godGhpcy5wYWdlcnMsIGZ1bmN0aW9uIChwYWdlcikge1xyXG4gICAgICAgICAgICAgIHBhZ2VyLmFwcGVuZENoaWxkKGZyYWcuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyIHRoZSBoZWFkZXJcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLnJlbmRlckhlYWRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgdGhhdC5sYWJlbHMgPSBbXTtcclxuXHJcbiAgICAgIGlmICh0aGF0LmhlYWRpbmdzICYmIHRoYXQuaGVhZGluZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICBlYWNoKHRoYXQuaGVhZGluZ3MsIGZ1bmN0aW9uICh0aCwgaSkge1xyXG5cclxuICAgICAgICAgICAgICB0aGF0LmxhYmVsc1tpXSA9IHRoLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKHRoLmZpcnN0RWxlbWVudENoaWxkLCBcImRhdGFUYWJsZS1zb3J0ZXJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gdGguZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdGguc29ydGFibGUgPSB0aC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIpICE9PSBcImZhbHNlXCI7XHJcblxyXG4gICAgICAgICAgICAgIHRoLm9yaWdpbmFsQ2VsbEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNvcnRhYmxlICYmIHRoLnNvcnRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gY3JlYXRlRWxlbWVudChcImFcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaHJlZjogXCIjXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJkYXRhVGFibGUtc29ydGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBodG1sOiB0aC5pbm5lckhUTUxcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICB0aC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhhdC5maXhDb2x1bW5zKCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQmluZCBldmVudCBsaXN0ZW5lcnNcclxuICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cclxuICAgKi9cclxuICBwcm90by5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXHJcbiAgICAgICAgICBvID0gdGhhdC5vcHRpb25zO1xyXG5cclxuICAgICAgLy8gUGVyIHBhZ2Ugc2VsZWN0b3JcclxuICAgICAgaWYgKG8ucGVyUGFnZVNlbGVjdCkge1xyXG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhhdC53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuZGF0YVRhYmxlLXNlbGVjdG9yXCIpO1xyXG4gICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgLy8gQ2hhbmdlIHBlciBwYWdlXHJcbiAgICAgICAgICAgICAgb24oc2VsZWN0b3IsIFwiY2hhbmdlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgIG8ucGVyUGFnZSA9IHBhcnNlSW50KHRoaXMudmFsdWUsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgdGhhdC51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHRoYXQuZml4SGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUucGVycGFnZVwiLCBvLnBlclBhZ2UpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTZWFyY2ggaW5wdXRcclxuICAgICAgaWYgKG8uc2VhcmNoYWJsZSkge1xyXG4gICAgICAgICAgdGhhdC5pbnB1dCA9IHRoYXQud3JhcHBlci5xdWVyeVNlbGVjdG9yKFwiLmRhdGFUYWJsZS1pbnB1dFwiKTtcclxuICAgICAgICAgIGlmICh0aGF0LmlucHV0KSB7XHJcbiAgICAgICAgICAgICAgb24odGhhdC5pbnB1dCwgXCJrZXl1cFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICB0aGF0LnNlYXJjaCh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUGFnZXIocykgLyBzb3J0aW5nXHJcbiAgICAgIG9uKHRoYXQud3JhcHBlciwgXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgdmFyIHQgPSBlLnRhcmdldDtcclxuICAgICAgICAgIGlmICh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYVwiKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHQuaGFzQXR0cmlidXRlKFwiZGF0YS1wYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoYXQucGFnZSh0LmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgICBvLnNvcnRhYmxlICYmXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5jb250YWlucyh0LCBcImRhdGFUYWJsZS1zb3J0ZXJcIikgJiZcclxuICAgICAgICAgICAgICAgICAgdC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIikgIT0gXCJmYWxzZVwiXHJcbiAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoYXQuY29sdW1ucygpLnNvcnQodGhhdC5hY3RpdmVIZWFkaW5ncy5pbmRleE9mKHQucGFyZW50Tm9kZSkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHVwIGNvbHVtbnNcclxuICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cclxuICAgKi9cclxuICBwcm90by5zZXRDb2x1bW5zID0gZnVuY3Rpb24gKGFqYXgpIHtcclxuXHJcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgIGlmICghYWpheCkge1xyXG4gICAgICAgICAgZWFjaCh0aGF0LmRhdGEsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICBlYWNoKHJvdy5jZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgY2VsbC5kYXRhID0gY2VsbC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBjb2x1bW5zIG9wdGlvblxyXG4gICAgICBpZiAodGhhdC5vcHRpb25zLmNvbHVtbnMgJiYgdGhhdC5oZWFkaW5ncy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICBlYWNoKHRoYXQub3B0aW9ucy5jb2x1bW5zLCBmdW5jdGlvbiAoZGF0YSkge1xyXG5cclxuICAgICAgICAgICAgICAvLyBjb252ZXJ0IHNpbmdsZSBjb2x1bW4gc2VsZWN0aW9uIHRvIGFycmF5XHJcbiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGRhdGEuc2VsZWN0KSkge1xyXG4gICAgICAgICAgICAgICAgICBkYXRhLnNlbGVjdCA9IFtkYXRhLnNlbGVjdF07XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShcInJlbmRlclwiKSAmJiB0eXBlb2YgZGF0YS5yZW5kZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdGVkQ29sdW1ucyA9IHRoYXQuc2VsZWN0ZWRDb2x1bW5zLmNvbmNhdChkYXRhLnNlbGVjdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICB0aGF0LmNvbHVtblJlbmRlcmVycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGRhdGEuc2VsZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXI6IGRhdGEucmVuZGVyXHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgLy8gQWRkIHRoZSBkYXRhIGF0dHJpYnV0ZXMgdG8gdGhlIHRoIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgZWFjaChkYXRhLnNlbGVjdCwgZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdGggPSB0aGF0LmhlYWRpbmdzW2NvbHVtbl07XHJcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiLCBkYXRhLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGguc2V0QXR0cmlidXRlKFwiZGF0YS1mb3JtYXRcIiwgZGF0YS5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KFwic29ydGFibGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIiwgZGF0YS5zb3J0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KFwiaGlkZGVuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oaWRkZW4gIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5zKCkuaGlkZShjb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShcInNvcnRcIikgJiYgZGF0YS5zZWxlY3QubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNvbHVtbnMoKS5zb3J0KGRhdGEuc2VsZWN0WzBdICsgMSwgZGF0YS5zb3J0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGF0Lmhhc1Jvd3MpIHtcclxuICAgICAgICAgIGVhY2godGhhdC5kYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgcm93LmRhdGFJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNlbGwuZGF0YSA9IGNlbGwuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWRDb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgIGVhY2godGhhdC5kYXRhLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgIGVhY2gocm93LmNlbGxzLCBmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWRDb2x1bW5zLmluZGV4T2YoaSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2godGhhdC5jb2x1bW5SZW5kZXJlcnMsIGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmNvbHVtbnMuaW5kZXhPZihpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9IG8ucmVuZGVyZXIuY2FsbCh0aGF0LCBjZWxsLmRhdGEsIGNlbGwsIHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhhdC5jb2x1bW5zKCkucmVidWlsZCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGF0LnJlbmRlcihcImhlYWRlclwiKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBEZXN0cm95IHRoZSBpbnN0YW5jZVxyXG4gICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy50YWJsZS5pbm5lckhUTUwgPSB0aGlzLmluaXRpYWxMYXlvdXQ7XHJcblxyXG4gICAgICAvLyBSZW1vdmUgdGhlIGNsYXNzTmFtZVxyXG4gICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoaXMudGFibGUsIFwiZGF0YVRhYmxlLXRhYmxlXCIpO1xyXG5cclxuICAgICAgLy8gUmVtb3ZlIHRoZSBjb250YWluZXJzXHJcbiAgICAgIHRoaXMud3JhcHBlci5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0aGlzLnRhYmxlLCB0aGlzLndyYXBwZXIpO1xyXG5cclxuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUgaW5zdGFuY2VcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5wYWdpbmF0ZSh0aGlzKTtcclxuICAgICAgdGhpcy5yZW5kZXIoXCJwYWdlXCIpO1xyXG5cclxuICAgICAgdGhpcy5saW5rcyA9IFtdO1xyXG5cclxuICAgICAgdmFyIGkgPSB0aGlzLnBhZ2VzLmxlbmd0aDtcclxuICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgdmFyIG51bSA9IGkgKyAxO1xyXG4gICAgICAgICAgdGhpcy5saW5rc1tpXSA9IGJ1dHRvbihpID09PSAwID8gXCJhY3RpdmVcIiA6IFwiXCIsIG51bSwgbnVtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zb3J0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcihcInBhZ2VyXCIpO1xyXG5cclxuICAgICAgdGhpcy5yb3dzKCkudXBkYXRlKCk7XHJcblxyXG4gICAgICB0aGlzLmVtaXQoXCJkYXRhdGFibGUudXBkYXRlXCIpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvcnQgcm93cyBpbnRvIHBhZ2VzXHJcbiAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAqL1xyXG4gIHByb3RvLnBhZ2luYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgcGVyUGFnZSA9IHRoaXMub3B0aW9ucy5wZXJQYWdlLFxyXG4gICAgICAgICAgcm93cyA9IHRoaXMuYWN0aXZlUm93cztcclxuXHJcbiAgICAgIGlmICh0aGlzLnNlYXJjaGluZykge1xyXG4gICAgICAgICAgcm93cyA9IFtdO1xyXG5cclxuICAgICAgICAgIGVhY2godGhpcy5zZWFyY2hEYXRhLCBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICByb3dzLnB1c2godGhpcy5hY3RpdmVSb3dzW2luZGV4XSk7XHJcbiAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgZm9yIGhpZGRlbiBjb2x1bW5zXHJcbiAgICAgIHRoaXMucGFnZXMgPSByb3dzXHJcbiAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0ciwgaSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpICUgcGVyUGFnZSA9PT0gMCA/IHJvd3Muc2xpY2UoaSwgaSArIHBlclBhZ2UpIDogbnVsbDtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYWdlKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudG90YWxQYWdlcyA9IHRoaXMubGFzdFBhZ2UgPSB0aGlzLnBhZ2VzLmxlbmd0aDtcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLnRvdGFsUGFnZXM7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogRml4IGNvbHVtbiB3aWR0aHNcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLmZpeENvbHVtbnMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZpeGVkQ29sdW1ucyAmJiB0aGlzLmFjdGl2ZUhlYWRpbmdzICYmIHRoaXMuYWN0aXZlSGVhZGluZ3MubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgdmFyIGNlbGxzLFxyXG4gICAgICAgICAgICAgIGhkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgdGhpcy5jb2x1bW5XaWR0aHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGhlYWRpbmdzIHdlIG5lZWQgb25seSBzZXQgdGhlIHdpZHRocyBvbiB0aGVtXHJcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UgbmVlZCBhIHRlbXAgaGVhZGVyIGFuZCB0aGUgd2lkdGhzIG5lZWQgYXBwbHlpbmcgdG8gYWxsIGNlbGxzXHJcbiAgICAgICAgICBpZiAodGhpcy50YWJsZS50SGVhZCkge1xyXG4gICAgICAgICAgICAgIC8vIFJlc2V0IHdpZHRoc1xyXG4gICAgICAgICAgICAgIGVhY2godGhpcy5hY3RpdmVIZWFkaW5ncywgZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgIGVhY2godGhpcy5hY3RpdmVIZWFkaW5ncywgZnVuY3Rpb24gKGNlbGwsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgdmFyIG93ID0gY2VsbC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgdmFyIHcgPSBvdyAvIHRoaXMucmVjdC53aWR0aCAqIDEwMDtcclxuICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IHcgKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5XaWR0aHNbaV0gPSBvdztcclxuICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY2VsbHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gTWFrZSB0ZW1wZXJhcnkgaGVhZGluZ3NcclxuICAgICAgICAgICAgICBoZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICAgICAgICB2YXIgciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMudGFibGUudEJvZGllc1swXS5yb3dzWzBdLmNlbGxzO1xyXG4gICAgICAgICAgICAgIGVhY2goYywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdGggPSBjcmVhdGVFbGVtZW50KFwidGhcIik7XHJcbiAgICAgICAgICAgICAgICAgIHIuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHRoKTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgaGQuYXBwZW5kQ2hpbGQocik7XHJcbiAgICAgICAgICAgICAgdGhpcy50YWJsZS5pbnNlcnRCZWZvcmUoaGQsIHRoaXMuYm9keSk7XHJcblxyXG4gICAgICAgICAgICAgIHZhciB3aWR0aHMgPSBbXTtcclxuICAgICAgICAgICAgICBlYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgb3cgPSBjZWxsLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdyA9IG93IC8gdGhpcy5yZWN0LndpZHRoICogMTAwO1xyXG4gICAgICAgICAgICAgICAgICB3aWR0aHMucHVzaCh3KTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5XaWR0aHNbaV0gPSBvdztcclxuICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgZWFjaCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5zKGNlbGwuY2VsbEluZGV4KS52aXNpYmxlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IHdpZHRoc1tpXSArIFwiJVwiO1xyXG4gICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gRGlzY2FyZCB0aGUgdGVtcCBoZWFkZXJcclxuICAgICAgICAgICAgICB0aGlzLnRhYmxlLnJlbW92ZUNoaWxkKGhkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpeCB0aGUgY29udGFpbmVyIGhlaWdodDtcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLmZpeEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5maXhlZEhlaWdodCkge1xyXG4gICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gbnVsbDtcclxuICAgICAgICAgIHRoaXMucmVjdCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5yZWN0LmhlaWdodCArIFwicHhcIjtcclxuICAgICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcmZvcm0gYSBzZWFyY2ggb2YgdGhlIGRhdGEgc2V0XHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBxdWVyeVxyXG4gICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8uc2VhcmNoID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgIGlmICghdGhpcy5oYXNSb3dzKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICBxdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgdGhpcy5zZWFyY2hpbmcgPSB0cnVlO1xyXG4gICAgICB0aGlzLnNlYXJjaERhdGEgPSBbXTtcclxuXHJcbiAgICAgIGlmICghcXVlcnkubGVuZ3RoKSB7XHJcbiAgICAgICAgICB0aGlzLnNlYXJjaGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS5zZWFyY2hcIiwgcXVlcnksIHRoaXMuc2VhcmNoRGF0YSk7XHJcbiAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoaXMud3JhcHBlciwgXCJzZWFyY2gtcmVzdWx0c1wiKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jbGVhcigpO1xyXG5cclxuICAgICAgZWFjaCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChyb3csIGlkeCkge1xyXG4gICAgICAgICAgdmFyIGluQXJyYXkgPSB0aGlzLnNlYXJjaERhdGEuaW5kZXhPZihyb3cpID4gLTE7XHJcblxyXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01vYml1czEvVmFuaWxsYS1EYXRhVGFibGVzL2lzc3Vlcy8xMlxyXG4gICAgICAgICAgdmFyIGRvZXNRdWVyeU1hdGNoID0gcXVlcnkuc3BsaXQoXCIgXCIpLnJlZHVjZShmdW5jdGlvbiAoYm9vbCwgd29yZCkge1xyXG4gICAgICAgICAgICAgIHZhciBpbmNsdWRlcyA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICBjZWxsID0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgY29udGVudCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgcm93LmNlbGxzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNlbGwgPSByb3cuY2VsbHNbeF07XHJcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjZWxsLmhhc0F0dHJpYnV0ZSgnZGF0YS1jb250ZW50JykgPyBjZWxsLmdldEF0dHJpYnV0ZSgnZGF0YS1jb250ZW50JykgOiBjZWxsLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yod29yZCkgPiAtMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5zKGNlbGwuY2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIGJvb2wgJiYgaW5jbHVkZXM7XHJcbiAgICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICBpZiAoZG9lc1F1ZXJ5TWF0Y2ggJiYgIWluQXJyYXkpIHtcclxuICAgICAgICAgICAgICByb3cuc2VhcmNoSW5kZXggPSBpZHg7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZWFyY2hEYXRhLnB1c2goaWR4KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcm93LnNlYXJjaEluZGV4ID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICBjbGFzc0xpc3QuYWRkKHRoaXMud3JhcHBlciwgXCJzZWFyY2gtcmVzdWx0c1wiKTtcclxuXHJcbiAgICAgIGlmICghdGhhdC5zZWFyY2hEYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSh0aGF0LndyYXBwZXIsIFwic2VhcmNoLXJlc3VsdHNcIik7XHJcblxyXG4gICAgICAgICAgdGhhdC5zZXRNZXNzYWdlKHRoYXQub3B0aW9ucy5sYWJlbHMubm9Sb3dzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoYXQudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS5zZWFyY2hcIiwgcXVlcnksIHRoaXMuc2VhcmNoRGF0YSk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbmdlIHBhZ2VcclxuICAgKiBAcGFyYW0gIHtpbnR9IHBhZ2VcclxuICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLnBhZ2UgPSBmdW5jdGlvbiAocGFnZSkge1xyXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGxvYWQgdGhlIGN1cnJlbnQgcGFnZSBhZ2Fpbi5cclxuICAgICAgaWYgKHBhZ2UgPT0gdGhpcy5jdXJyZW50UGFnZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWlzTmFOKHBhZ2UpKSB7XHJcbiAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFyc2VJbnQocGFnZSwgMTApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocGFnZSA+IHRoaXMucGFnZXMubGVuZ3RoIHx8IHBhZ2UgPCAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucmVuZGVyKFwicGFnZVwiKTtcclxuICAgICAgdGhpcy5yZW5kZXIoXCJwYWdlclwiKTtcclxuXHJcbiAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS5wYWdlXCIsIHBhZ2UpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvcnQgYnkgY29sdW1uXHJcbiAgICogQHBhcmFtICB7aW50fSBjb2x1bW4gLSBUaGUgY29sdW1uIG5vLlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gZGlyZWN0aW9uIC0gYXNjIG9yIGRlc2NcclxuICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLnNvcnRDb2x1bW4gPSBmdW5jdGlvbiAoY29sdW1uLCBkaXJlY3Rpb24pIHtcclxuICAgICAgLy8gVXNlIGNvbHVtbnMgQVBJIHVudGlsIHNvcnRDb2x1bW4gbWV0aG9kIGlzIHJlbW92ZWRcclxuICAgICAgdGhpcy5jb2x1bW5zKCkuc29ydChjb2x1bW4sIGRpcmVjdGlvbik7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIG5ldyByb3cgZGF0YVxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXHJcbiAgICovXHJcbiAgcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcclxuICAgICAgICAgIHJvd3MgPSBbXTtcclxuICAgICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgICAgICBpZiAoZGF0YS5oZWFkaW5ncykge1xyXG4gICAgICAgICAgICAgIGlmICghdGhhdC5oYXNIZWFkaW5ncyAmJiAhdGhhdC5oYXNSb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgIHRoO1xyXG4gICAgICAgICAgICAgICAgICBlYWNoKGRhdGEuaGVhZGluZ3MsIGZ1bmN0aW9uIChoZWFkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogaGVhZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkLmFwcGVuZENoaWxkKHRyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGVyID0gdHI7XHJcbiAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGluZ3MgPSBbXS5zbGljZS5jYWxsKHRyLmNlbGxzKTtcclxuICAgICAgICAgICAgICAgICAgdGhhdC5oYXNIZWFkaW5ncyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBSZS1lbmFibGUgc29ydGluZyBpZiBpdCB3YXMgZGlzYWJsZWQgZHVlXHJcbiAgICAgICAgICAgICAgICAgIC8vIHRvIG1pc3NpbmcgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgIHRoYXQub3B0aW9ucy5zb3J0YWJsZSA9IHRoYXQuaW5pdGlhbFNvcnRhYmxlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgc29ydGluZyBvbiBuZXcgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgIHRoYXQucmVuZGVyKFwiaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoZGF0YS5kYXRhICYmIGlzQXJyYXkoZGF0YS5kYXRhKSkge1xyXG4gICAgICAgICAgICAgIHJvd3MgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgICAgZWFjaChkYXRhLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgdmFyIHIgPSBbXTtcclxuICAgICAgICAgICAgICBlYWNoKHJvdywgZnVuY3Rpb24gKGNlbGwsIGhlYWRpbmcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoYXQubGFiZWxzLmluZGV4T2YoaGVhZGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcltpbmRleF0gPSBjZWxsO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgcm93cy5wdXNoKHIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhhdC5yb3dzKCkuYWRkKHJvd3MpO1xyXG5cclxuICAgICAgICAgIHRoYXQuaGFzUm93cyA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoYXQudXBkYXRlKCk7XHJcblxyXG4gICAgICB0aGF0LmZpeENvbHVtbnMoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBSZWZyZXNoIHRoZSBpbnN0YW5jZVxyXG4gICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICB0aGlzLmlucHV0LnZhbHVlID0gXCJcIjtcclxuICAgICAgICAgIHRoaXMuc2VhcmNoaW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgIHRoaXMub25GaXJzdFBhZ2UgPSB0cnVlO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgdGhpcy5lbWl0KFwiZGF0YXRhYmxlLnJlZnJlc2hcIik7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogVHJ1bmNhdGUgdGhlIHRhYmxlXHJcbiAgICogQHBhcmFtICB7bWl4ZXN9IGh0bWwgLSBIVE1MIHN0cmluZyBvciBIVE1MRWxlbWVudFxyXG4gICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICBpZiAodGhpcy5ib2R5KSB7XHJcbiAgICAgICAgICBmbHVzaCh0aGlzLmJvZHksIHRoaXMuaXNJRSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmJvZHk7XHJcbiAgICAgIGlmICghdGhpcy5ib2R5KSB7XHJcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzLnRhYmxlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaHRtbCkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBodG1sID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGZyYWcgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgIGZyYWcuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoaHRtbCk7XHJcbiAgICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBFeHBvcnQgdGFibGUgdG8gdmFyaW91cyBmb3JtYXRzIChjc3YsIHR4dCBvciBzcWwpXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIFVzZXIgb3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgcHJvdG8uZXhwb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgaWYgKCF0aGlzLmhhc0hlYWRpbmdzICYmICF0aGlzLmhhc1Jvd3MpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgIHZhciBoZWFkZXJzID0gdGhpcy5hY3RpdmVIZWFkaW5ncyxcclxuICAgICAgICAgIHJvd3MgPSBbXSxcclxuICAgICAgICAgIGFyciA9IFtdLFxyXG4gICAgICAgICAgaSxcclxuICAgICAgICAgIHgsXHJcbiAgICAgICAgICBzdHIsXHJcbiAgICAgICAgICBsaW5rO1xyXG5cclxuICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgZG93bmxvYWQ6IHRydWUsXHJcbiAgICAgICAgICBza2lwQ29sdW1uOiBbXSxcclxuXHJcbiAgICAgICAgICAvLyBjc3ZcclxuICAgICAgICAgIGxpbmVEZWxpbWl0ZXI6IFwiXFxuXCIsXHJcbiAgICAgICAgICBjb2x1bW5EZWxpbWl0ZXI6IFwiLFwiLFxyXG5cclxuICAgICAgICAgIC8vIHNxbFxyXG4gICAgICAgICAgdGFibGVOYW1lOiBcIm15VGFibGVcIixcclxuXHJcbiAgICAgICAgICAvLyBqc29uXHJcbiAgICAgICAgICByZXBsYWNlcjogbnVsbCxcclxuICAgICAgICAgIHNwYWNlOiA0XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBDaGVjayBmb3IgdGhlIG9wdGlvbnMgb2JqZWN0XHJcbiAgICAgIGlmICghaXNPYmplY3Qob3B0aW9ucykpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG8gPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgaWYgKG8udHlwZSkge1xyXG4gICAgICAgICAgaWYgKG8udHlwZSA9PT0gXCJ0eHRcIiB8fCBvLnR5cGUgPT09IFwiY3N2XCIpIHtcclxuICAgICAgICAgICAgICAvLyBJbmNsdWRlIGhlYWRpbmdzXHJcbiAgICAgICAgICAgICAgcm93c1swXSA9IHRoaXMuaGVhZGVyO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFNlbGVjdGlvbiBvciB3aG9sZSB0YWJsZVxyXG4gICAgICAgICAgaWYgKG8uc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgLy8gUGFnZSBudW1iZXJcclxuICAgICAgICAgICAgICBpZiAoIWlzTmFOKG8uc2VsZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICByb3dzID0gcm93cy5jb25jYXQodGhpcy5wYWdlc1tvLnNlbGVjdGlvbiAtIDFdKTtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoby5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIEFycmF5IG9mIHBhZ2UgbnVtYmVyc1xyXG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgby5zZWxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHJvd3MgPSByb3dzLmNvbmNhdCh0aGlzLnBhZ2VzW28uc2VsZWN0aW9uW2ldIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByb3dzID0gcm93cy5jb25jYXQodGhpcy5hY3RpdmVSb3dzKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBPbmx5IHByb2NlZWQgaWYgd2UgaGF2ZSBkYXRhXHJcbiAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICBpZiAoby50eXBlID09PSBcInR4dFwiIHx8IG8udHlwZSA9PT0gXCJjc3ZcIikge1xyXG4gICAgICAgICAgICAgICAgICBzdHIgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCByb3dzW2ldLmNlbGxzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCB2aXNpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnNraXBDb2x1bW4uaW5kZXhPZihoZWFkZXJzW3hdLm9yaWdpbmFsQ2VsbEluZGV4KSA8IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zKGhlYWRlcnNbeF0ub3JpZ2luYWxDZWxsSW5kZXgpLnZpc2libGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHJvd3NbaV0udGV4dHNbeF0udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzezIsfS9nLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4vZywgJyAgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1wiL2csICdcIlwiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0LmluZGV4T2YoXCIsXCIpID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gJ1wiJyArIHRleHQgKyAnXCInO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSB0ZXh0ICsgby5jb2x1bW5EZWxpbWl0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbHVtbiBkZWxpbWl0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci50cmltKCkuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBsaW5lIGRlbGltaXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgc3RyICs9IG8ubGluZURlbGltaXRlcjtcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGxpbmUgZGVsaW1pdGVyXHJcbiAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci50cmltKCkuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmIChvLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBcImRhdGE6dGV4dC9jc3Y7Y2hhcnNldD11dGYtOCxcIiArIHN0cjtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoby50eXBlID09PSBcInNxbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIEJlZ2luIElOU0VSVCBzdGF0ZW1lbnRcclxuICAgICAgICAgICAgICAgICAgc3RyID0gXCJJTlNFUlQgSU5UTyBgXCIgKyBvLnRhYmxlTmFtZSArIFwiYCAoXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRhYmxlIGhlYWRpbmdzIHRvIGNvbHVtbiBuYW1lc1xyXG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCBjb2x1bW4gdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2tpcENvbHVtbi5pbmRleE9mKGhlYWRlcnNbaV0ub3JpZ2luYWxDZWxsSW5kZXgpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyhoZWFkZXJzW2ldLm9yaWdpbmFsQ2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBcImBcIiArIGhlYWRlcnNbaV0udGV4dENvbnRlbnQgKyBcImAsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYVxyXG4gICAgICAgICAgICAgICAgICBzdHIgPSBzdHIudHJpbSgpLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBCZWdpbiBWQUxVRVNcclxuICAgICAgICAgICAgICAgICAgc3RyICs9IFwiKSBWQUxVRVMgXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHJvd3MgYW5kIGNvbnZlcnQgY2VsbCBkYXRhIHRvIGNvbHVtbiB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBcIihcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgcm93c1tpXS5jZWxscy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb2x1bW4gc2tpcCBhbmQgY29sdW1uIHZpc2liaWxpdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2tpcENvbHVtbi5pbmRleE9mKGhlYWRlcnNbeF0ub3JpZ2luYWxDZWxsSW5kZXgpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnMoaGVhZGVyc1t4XS5vcmlnaW5hbENlbGxJbmRleCkudmlzaWJsZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXCInICsgcm93c1tpXS5jZWxsc1t4XS50ZXh0Q29udGVudCArICdcIiwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWFcclxuICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci50cmltKCkuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBlbmQgVkFMVUVTXHJcbiAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gXCIpLFwiO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWFcclxuICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnRyaW0oKS5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gQWRkIHRyYWlsaW5nIGNvbG9uXHJcbiAgICAgICAgICAgICAgICAgIHN0ciArPSBcIjtcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmIChvLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBcImRhdGE6YXBwbGljYXRpb24vc3FsO2NoYXJzZXQ9dXRmLTgsXCIgKyBzdHI7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8udHlwZSA9PT0gXCJqc29uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSByb3dzXHJcbiAgICAgICAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCByb3dzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhcnJbeF0gPSBhcnJbeF0gfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIGNvbHVtbnNcclxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCBjb2x1bW4gdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5za2lwQ29sdW1uLmluZGV4T2YoaGVhZGVyc1tpXS5vcmlnaW5hbENlbGxJbmRleCkgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyhoZWFkZXJzW2ldLm9yaWdpbmFsQ2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW3hdW2hlYWRlcnNbaV0udGV4dENvbnRlbnRdID0gcm93c1t4XS5jZWxsc1tpXS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGFycmF5IG9mIG9iamVjdHMgdG8gSlNPTiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgc3RyID0gSlNPTi5zdHJpbmdpZnkoYXJyLCBvLnJlcGxhY2VyLCBvLnNwYWNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmIChvLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBcImRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04LFwiICsgc3RyO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAvLyBEb3dubG9hZFxyXG4gICAgICAgICAgICAgIGlmIChvLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIEZpbGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgIG8uZmlsZW5hbWUgPSBvLmZpbGVuYW1lIHx8IFwiZGF0YXRhYmxlX2V4cG9ydFwiO1xyXG4gICAgICAgICAgICAgICAgICBvLmZpbGVuYW1lICs9IFwiLlwiICsgby50eXBlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgc3RyID0gZW5jb2RlVVJJKHN0cik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBsaW5rIHRvIHRyaWdnZXIgdGhlIGRvd25sb2FkXHJcbiAgICAgICAgICAgICAgICAgIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICAgICAgICAgICAgbGluay5ocmVmID0gc3RyO1xyXG4gICAgICAgICAgICAgICAgICBsaW5rLmRvd25sb2FkID0gby5maWxlbmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgbGlua1xyXG4gICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aGUgZG93bmxvYWRcclxuICAgICAgICAgICAgICAgICAgbGluay5jbGljaygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaW5rXHJcbiAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0IGRhdGEgdG8gdGhlIHRhYmxlXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIFVzZXIgb3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgcHJvdG8uaW1wb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgdmFyIG9iaiA9IGZhbHNlO1xyXG4gICAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAvLyBjc3ZcclxuICAgICAgICAgIGxpbmVEZWxpbWl0ZXI6IFwiXFxuXCIsXHJcbiAgICAgICAgICBjb2x1bW5EZWxpbWl0ZXI6IFwiLFwiXHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBDaGVjayBmb3IgdGhlIG9wdGlvbnMgb2JqZWN0XHJcbiAgICAgIGlmICghaXNPYmplY3Qob3B0aW9ucykpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucyA9IGV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5kYXRhLmxlbmd0aCB8fCBpc09iamVjdChvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgICAvLyBJbXBvcnQgQ1NWXHJcbiAgICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSBcImNzdlwiKSB7XHJcbiAgICAgICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICBkYXRhOiBbXVxyXG4gICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgIC8vIFNwbGl0IHRoZSBzdHJpbmcgaW50byByb3dzXHJcbiAgICAgICAgICAgICAgdmFyIHJvd3MgPSBvcHRpb25zLmRhdGEuc3BsaXQob3B0aW9ucy5saW5lRGVsaW1pdGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHJvd3MubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWFkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgb2JqLmhlYWRpbmdzID0gcm93c1swXS5zcGxpdChvcHRpb25zLmNvbHVtbkRlbGltaXRlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgcm93cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICBlYWNoKHJvd3MsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhW2ldID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gU3BsaXQgdGhlIHJvd3MgaW50byB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSByb3cuc3BsaXQob3B0aW9ucy5jb2x1bW5EZWxpbWl0ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZGF0YVtpXS5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09IFwianNvblwiKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGpzb24gPSBpc0pzb24ob3B0aW9ucy5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gVmFsaWQgSlNPTiBzdHJpbmdcclxuICAgICAgICAgICAgICBpZiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXVxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgZWFjaChqc29uLCBmdW5jdGlvbiAoZGF0YSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgb2JqLmRhdGFbaV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgIGVhY2goZGF0YSwgZnVuY3Rpb24gKHZhbHVlLCBjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmhlYWRpbmdzLmluZGV4T2YoY29sdW1uKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmhlYWRpbmdzLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhW2ldLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoYXQncyBub3QgdmFsaWQgSlNPTiFcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChpc09iamVjdChvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5kYXRhO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgICAvLyBBZGQgdGhlIHJvd3NcclxuICAgICAgICAgICAgICB0aGlzLmluc2VydChvYmopO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuICAvKipcclxuICAgKiBQcmludCB0aGUgdGFibGVcclxuICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgaGVhZGluZ3MgPSB0aGlzLmFjdGl2ZUhlYWRpbmdzO1xyXG4gICAgICB2YXIgcm93cyA9IHRoaXMuYWN0aXZlUm93cztcclxuICAgICAgdmFyIHRhYmxlID0gY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xyXG4gICAgICB2YXIgdGhlYWQgPSBjcmVhdGVFbGVtZW50KFwidGhlYWRcIik7XHJcbiAgICAgIHZhciB0Ym9keSA9IGNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKTtcclxuXHJcbiAgICAgIHZhciB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgZWFjaChoZWFkaW5ncywgZnVuY3Rpb24gKHRoKSB7XHJcbiAgICAgICAgICB0ci5hcHBlbmRDaGlsZChcclxuICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGhcIiwge1xyXG4gICAgICAgICAgICAgICAgICBodG1sOiB0aC50ZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoZWFkLmFwcGVuZENoaWxkKHRyKTtcclxuXHJcbiAgICAgIGVhY2gocm93cywgZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgdmFyIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQoXHJcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBodG1sOiBjZWxsLnRleHRDb250ZW50XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGJvZHkuYXBwZW5kQ2hpbGQodHIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcclxuICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xyXG5cclxuICAgICAgLy8gT3BlbiBuZXcgd2luZG93XHJcbiAgICAgIHZhciB3ID0gd2luLm9wZW4oKTtcclxuXHJcbiAgICAgIC8vIEFwcGVuZCB0aGUgdGFibGUgdG8gdGhlIGJvZHlcclxuICAgICAgdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRhYmxlKTtcclxuXHJcbiAgICAgIC8vIFByaW50XHJcbiAgICAgIHcucHJpbnQoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTaG93IGEgbWVzc2FnZSBpbiB0aGUgdGFibGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxyXG4gICAqL1xyXG4gIHByb3RvLnNldE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICB2YXIgY29sc3BhbiA9IDE7XHJcblxyXG4gICAgICBpZiAodGhpcy5oYXNSb3dzKSB7XHJcbiAgICAgICAgICBjb2xzcGFuID0gdGhpcy5kYXRhWzBdLmNlbGxzLmxlbmd0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5jbGVhcihcclxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7XHJcbiAgICAgICAgICAgICAgaHRtbDogJzx0ZCBjbGFzcz1cImRhdGFUYWJsZXMtZW1wdHlcIiBjb2xzcGFuPVwiJyArXHJcbiAgICAgICAgICAgICAgICAgIGNvbHNwYW4gK1xyXG4gICAgICAgICAgICAgICAgICAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgK1xyXG4gICAgICAgICAgICAgICAgICBcIjwvdGQ+XCJcclxuICAgICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29sdW1ucyBBUEkgYWNjZXNzXHJcbiAgICogQHJldHVybiB7T2JqZWN0fSBuZXcgQ29sdW1ucyBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIHByb3RvLmNvbHVtbnMgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICByZXR1cm4gbmV3IENvbHVtbnModGhpcywgY29sdW1ucyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUm93cyBBUEkgYWNjZXNzXHJcbiAgICogQHJldHVybiB7T2JqZWN0fSBuZXcgUm93cyBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIHByb3RvLnJvd3MgPSBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICByZXR1cm4gbmV3IFJvd3ModGhpcywgcm93cyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGN1c3RvbSBldmVudCBsaXN0ZW5lclxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnRcclxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICB0aGlzLmV2ZW50cyA9IHRoaXMuZXZlbnRzIHx8IHt9O1xyXG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB0aGlzLmV2ZW50c1tldmVudF0gfHwgW107XHJcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgY3VzdG9tIGV2ZW50IGxpc3RlbmVyXHJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBldmVudFxyXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICovXHJcbiAgcHJvdG8ub2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICB0aGlzLmV2ZW50cyA9IHRoaXMuZXZlbnRzIHx8IHt9O1xyXG4gICAgICBpZiAoZXZlbnQgaW4gdGhpcy5ldmVudHMgPT09IGZhbHNlKSByZXR1cm47XHJcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5zcGxpY2UodGhpcy5ldmVudHNbZXZlbnRdLmluZGV4T2YoY2FsbGJhY2spLCAxKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBGaXJlIGN1c3RvbSBldmVudFxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnRcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIHByb3RvLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cyB8fCB7fTtcclxuICAgICAgaWYgKGV2ZW50IGluIHRoaXMuZXZlbnRzID09PSBmYWxzZSkgcmV0dXJuO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzW2V2ZW50XS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdW2ldLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xyXG4gICAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIERhdGFUYWJsZTtcclxufSk7XHJcbiJdfQ==
